# -*- firestarter: org-babel-tangle -*- 
#+TITLE: Screenshots
* Ideas
** Use create image
(create-image "foo.xpm" 'xpm nil :heuristic-mask t)
** Use ideas from pdf-view

[[https://github.com/politza/pdf-tools/blob/master/lisp/pdf-view.el][PDF View]]
Example: 
#+BEGIN_SRC emacs-lisp
(defun pdf-view-display-image (image &optional window inhibit-slice-p)
  ;; TODO: write documentation!
  (let ((ol (pdf-view-current-overlay window)))
    (when (window-live-p (overlay-get ol 'window))
      (let* ((size (image-size image t))
             (slice (if (not inhibit-slice-p)
                        (pdf-view-current-slice window)))
             (displayed-width (floor
                               (if slice
                                   (* (nth 2 slice)
                                      (car (image-size image)))
                                 (car (image-size image))))))
        (setf (pdf-view-current-image window) image)
        (move-overlay ol (point-min) (point-max))
        ;; In case the window is wider than the image, center the image
        ;; horizontally.
        (overlay-put ol 'before-string
                     (when (> (window-width window)
                              displayed-width)
                       (propertize " " 'display
                                   `(space :align-to
                                           ,(/ (- (window-width window)
                                                  displayed-width) 2)))))
        (overlay-put ol 'display
                     (if slice
                         (list (cons 'slice
                                     (pdf-util-scale slice size 'round))
                               image)
                       image))
        (let* ((win (overlay-get ol 'window))
               (hscroll (image-mode-window-get 'hscroll win))
               (vscroll (image-mode-window-get 'vscroll win)))
          ;; Reset scroll settings, in case they were changed.
          (if hscroll (set-window-hscroll win hscroll))
          (if vscroll (set-window-vscroll win vscroll)))))))


  #+END_SRC
** Use chrome devtools screenshot facility
- [[https://github.com/tryggvigy/chrome-devtools-protocol-screenshot][Chrome devtools screenshot link]]
- No need to use full library, just use CDP:
  #+BEGIN_SRC js
 function singlePage(data) {
  CDP({port: program.remoteDebuggingPort}, async (client) => {
    const {Page, Emulation, Runtime} = client;

    const originalDimentions = await Page
      .getLayoutMetrics()
      .then(r => r.layoutViewport)

    if (program.breakPoints) {
      for(b of program.breakPoints) {
        await Emulation.setVisibleSize({
          width: b,
          height: originalDimentions.clientHeight,
        });

        const b64Img = await Page.captureScreenshot();
        const buffer = new Buffer(b64Img.data, 'base64');

        fs.writeFileSync(`${dir}/${b}.png`, buffer);
        console.log(`wrote: ${dir}/${b}.png`);
      }
    } else {
      const b64Img = await Page.captureScreenshot();
      const buffer = new Buffer(b64Img.data, 'base64');

      fs.writeFileSync(`${dir}/out.png`, buffer);
      console.log(`wrote: ${dir}/out.png`);
    }

    // Reset the client size.
    await Emulation.setVisibleSize({
      width: originalDimentions.clientWidth,
      height: originalDimentions.clientHeight,
    });

    client.close();
  });
}
  #+END_SRC
** Make it a major mode (like pdf-view)
** Use syphon (OSX) and SPOUT (Windows) to capture GPU screenshots
- [[https://www.vmix.com/software/download.aspx][Screenshot tool from vmix]]
** Wasamasa flipbook
- [[https://github.com/wasamasa/quasiconf-2014/blob/master/code/flipbook.el][Flipbook by Wasamasa]]

