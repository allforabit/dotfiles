* Introduction
Emacs config based on doom emacs. All config is divided up as much as is possible.
** Ideas
- Make source block keys work only when entering insert mode
- In general see if there are ways to take advantage of evil setup in org mode
- Get rid of emacs keybindings completely and only leave evil bindings
* Emacs init
This bootstraps doom and sets up a few things thtat this depends on such as the
username.

Only real updates to this should be to add doom modules and the likes.

#+BEGIN_SRC emacs-lisp :tangle "~/Github/doom-emacs/init.el" :mkdirp yes
  ;;; init.el -*- lexical-binding: t; -*-
  ;;
  ;; Author:  Henrik Lissner <henrik@lissner.net>
  ;; URL:     https://github.com/allforabit/.emacs.d
  ;;
  ;;   =================     ===============     ===============   ========  ========
  ;;   \\ . . . . . . .\\   //. . . . . . .\\   //. . . . . . .\\  \\. . .\\// . . //
  ;;   ||. . ._____. . .|| ||. . ._____. . .|| ||. . ._____. . .|| || . . .\/ . . .||
  ;;   || . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||
  ;;   ||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||
  ;;   || . .||   ||. _-|| ||-_ .||   ||. . || || . .||   ||. _-|| ||-_.|\ . . . . ||
  ;;   ||. . ||   ||-'  || ||  `-||   || . .|| ||. . ||   ||-'  || ||  `|\_ . .|. .||
  ;;   || . _||   ||    || ||    ||   ||_ . || || . _||   ||    || ||   |\ `-_/| . ||
  ;;   ||_-' ||  .|/    || ||    \|.  || `-_|| ||_-' ||  .|/    || ||   | \  / |-_.||
  ;;   ||    ||_-'      || ||      `-_||    || ||    ||_-'      || ||   | \  / |  `||
  ;;   ||    `'         || ||         `'    || ||    `'         || ||   | \  / |   ||
  ;;   ||            .===' `===.         .==='.`===.         .===' /==. |  \/  |   ||
  ;;   ||         .=='   \_|-_ `===. .==='   _|_   `===. .===' _-|/   `==  \/  |   ||
  ;;   ||      .=='    _-'    `-_  `='    _-'   `-_    `='  _-'   `-_  /|  \/  |   ||
  ;;   ||   .=='    _-'          '-__\._-'         '-_./__-'         `' |. /|  |   ||
  ;;   ||.=='    _-'                                                     `' |  /==.||
  ;;   =='    _-'                                                            \/   `==
  ;;   \   _-'                                                                `-_   /
  ;;    `''                                                                      ``'
  ;;
  ;; These demons are not part of GNU Emacs.
  ;;
  ;;; License: MIT

  (require 'core (concat user-emacs-directory "core/core"))

  ;; (setq user-login-name "allforabit")

  ;; Utf-8 
  ;; (prefer-coding-system 'utf-8)
  ;; (set-default-coding-systems 'utf-8)
  ;; (set-language-environment 'utf-8)
  ;; (set-selection-coding-system 'utf-8)

  ;; Setup path (windows only for now)
  (when (string-equal system-type "windows-nt")
    (setenv "PATH"
      (concat
      ;; "C:/msys64/mingw64/bin" ";"
      "C:/msys64/usr/bin" ";"
      (getenv "PATH"))))

  (doom! :feature
          popup             ; tame sudden yet inevitable temporary windows
          ;debugger           ; FIXME stepping through code, to help you add bugs
          eval            ; repls, runners 'n builders; run code, run
          evil            ; come to the dark side, we have cookies
          file-templates  ; auto-snippets for empty files
          (lookup
           +devdocs
           +docsets) ; helping you get around
          services
          snippets        ; my elves. They type so I don't have to
          spellcheck      ; tasing you for misspelling mispelling
          syntax-checker  ; tasing you for every semicolon you forget
          version-control ; remember, remember that commit in November
          workspaces      ; tab emulation, persistence & separate workspaces

          :completion
          company         ; the ultimate code completion backend
          ivy             ; a search engine for love and life
          ;helm            ; the *other* search engine for love and life
          ;ido             ; the other *other* search engine...

          :ui
          doom            ; what makes DOOM look the way it does
          doom-dashboard  ; a nifty splash screen for Emacs
          doom-modeline   ; a snazzy Atom-inspired mode-line
          doom-quit       ; DOOM quit-message prompts when you quit Emacs
          hl-todo         ; highlight TODO/FIXME/NOTE tags
          nav-flash       ; blink the current line after jumping
          evil-goggles    ; display visual hints when editing in evil
          (window-select +ace-window)
          unicode         ; extended unicode support for various languages
          ;tabbar          ; FIXME an (incomplete) tab bar for Emacs

          :lang
          (org              ; organize your plain life in plain text
                              +attach          ; custom attachment system
                              +babel           ; running code in org
                              +capture         ; org-capture in and outside of Emacs
                              +export          ; centralized export system + more backends
                              +present         ; Emacs for presentations
                              ;; TODO +publish
                              )
          ;assembly        ; assembly for fun or debugging
          cc              ; C/C++/Obj-C madness
          clojure
          ;crystal         ; ruby at the speed of c
          ;csharp          ; unity, .NET, and mono shenanigans
          data            ; config/data formats
          ;elixir          ; erlang done right
          ;elm             ; care for a cup of TEA?
          emacs-lisp      ; drown in parentheses
          ;go              ; the hipster dialect
          haskell         ; a language that's lazier than I am
          ;hy              ; readability of scheme w/ speed of python
          java            ; the poster child for carpal tunnel syndrome
          javascript      ; all(hope(abandon(ye(who(enter(here))))))
          ;julia           ; a better, faster MATLAB
          latex           ; writing papers in Emacs has never been so fun
          ledger          ; an accounting system in Emacs
          ;lua             ; one-based indices? one-based indices
          markdown        ; writing docs for people to ignore
          ;ocaml           ; an objective camel
          ;perl            ; write code no one else can comprehend
          php             ; make php less awful to work with
          plantuml        ; diagrams for confusing people more
          ;purescript      ; javascript, but functional
          ;python          ; beautiful is better than ugly
          rest            ; Emacs as a REST client
          ;ruby            ; 1.step do {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
          ;rust            ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
          ;scala           ; java, but good
          sh              ; she sells (ba|z)sh shells on the C xor
          ;swift           ; who asked for emoji variables?
          typescript      ; javascript, but better
          web             ; the tubes
          :tools
          dired           ; making dired pretty [functional]
          electric-indent ; smarter, keyword-based electric-indent
          eshell          ; a consistent, cross-platform shell (WIP)
          gist            ; interacting with github gists
          impatient-mode  ; show off code over HTTP
          ;macos           ; MacOS-specific commands
          neotree         ; a project drawer, like NERDTree for vim
          password-store  ; password manager for nerds
          rotate-text     ; cycle region at point between text candidates
          term            ; terminals in Emacs
          tmux            ; an API for interacting with tmux
          upload          ; map local to remote projects via ssh/ftp


          ;; Applications are complex and opinionated modules that transform Emacs
          ;; toward a specific purpose. They may have additional dependencies and
          ;; should be loaded last.
          :app
          email           ; emacs as an email client
          irc             ; how neckbeards socialize
          rss             ; emacs as an RSS reader
          twitter         ; twitter client https://twitter.com/vnought
          write           ; emacs as a word processor (latex + org + markdown)

          ;; Private modules named after your username are loaded automatically.
          ;; Leaving this here is harmless though. Also, they are omitted from
          ;; source control (except for mine; use it as a reference).
          ;; original value: allforabit
          :private
          default
          allforabit)

        #+END_SRC

        #+RESULTS:
        : Doom modules initialized

* Private init
The private init is run before all other modules.
#+BEGIN_SRC emacs-lisp :tangle "~/Github/doom-emacs/modules/private/allforabit/init.el" :mkdirp yes
;;; private/allforabit/init.el -*- lexical-binding: t; -*-

;; To fix node modules??
;; Maybe should be only added in special circumstances
(setq org-babel-temporary-directory "~/Documents/Bitbucket/org/tmp")
;; TODO this slow down startup

(unless (file-directory-p org-babel-temporary-directory)
  (make-directory org-babel-temporary-directory))

(defvar +org-babel-languages
  '(calc
    css
    emacs-lisp
    haskell
    js
    typescript
    latex
    ledger
    lilypond
    lisp
    matlab
    plantuml
    python
    restclient ; ob-restclient
    ruby
    rust       ; ob-rust
    shell
    sqlite
    sql-mode   ; ob-sql-mode
    translate) ; ob-translate
  "A list of org-babel languages to load.")

;; I've swapped these keys on my keyboard
(setq x-super-keysym 'alt
      x-alt-keysym   'meta
      user-mail-address "kevnolan@gmail.com"
      user-full-name    "Kevin Nolan")


(def-package-hook! rtags :disable)

;; Org stuff
(setq +org-dir "~/Bitbucket/org/")

(after! org
  ;; TODO Figure out how to get this to work
  ;; This isn't working and is taking over other modes
  ;; (map! (:mode org-mode (:map ivy-mode-map
  ;;       [remap imenu] #'counsel-org-goto)))
  (setq org-ellipsis "…"))

(setq org-default-notes-file (concat +org-dir "notes.org")
      org-capture-templates
      '(("t" "Todo" entry
         (file+headline (expand-file-name "gtd.org" +org-dir) "Inbox")
         "* [ ] %?\n%i" :prepend t :kill-buffer t)
        ("c" "Code journal" entry (file+olp+datetree "~/Bitbucket/org/code.org" "Journal")
         "* %?\nEntered on %U\n  %i\n  %a"
         :jump-to-captured t)
        ("n" "Notes" entry
         (file+headline org-default-notes-file "Inbox")
         "* %u %?\n%i" :prepend t :kill-buffer t)))

;; Use git bash for shell
;; TODO maybe should be msys2??
;; (setq explicit-shell-file-name
;;       "C:/Program Files (x86)/Git/bin/bash.exe")
;; (setq shell-file-name explicit-shell-file-name)
;; (add-to-list 'exec-path "C:/Program Files (x86)/Git/bin")

;; An extra measure to prevent the flash of unstyled mode-line while Emacs is
;; booting up (when Doom is byte-compiled).
;; (setq-default mode-line-format nil)
;; TODO try Fira Mono
(setq doom-big-font (font-spec :family "Source Code Pro" :size 19))
(setq doom-font (font-spec :family "Source Code Pro" :size 14)
      doom-variable-pitch-font (font-spec :family "Georgia")
      doom-unicode-font (font-spec :family "Symbola")
      ;; ui/doom-modeline
      +doom-modeline-height 23
      ;; `doom-themes'
      doom-neotree-enable-variable-pitch nil
      doom-neotree-project-size 1.2
      doom-neotree-line-spacing 0
      doom-neotree-folder-size 1.0
      doom-neotree-chevron-size 0.6)

#+END_SRC

#+RESULTS:
: 0.6
* Packages  
** Management
*** [ ] Add image+
 https://github.com/mhayashi1120/Emacs-imagex
*** [ ] Add ahk
https://melpa.org/#/ahk-mode
** Main
The packages to install go here.

#+BEGIN_SRC emacs-lisp :tangle  "~/Github/doom-emacs/modules/private/allforabit/packages.el" :mkdirp yes
;; TODO should config not be in config.el
(package! drupal-mode
 :config
 (setq drupal-drush-program "c:/Bitnami/drupal-7.56-2/apps/drupal/drush/dr.bat"))


(package! ob-typescript)
(package! rich-minority)
(package! lispy)
;; (package! psysh)
(package! livid-mode)
(package! list-processes+)
;; (packp)

;; (package! solarized-theme)

;; (package! org-trello)

(package! emacs-snippets
  :recipe (:fetcher github
           :repo "allforabit/emacs-snippets"
           :files ("*")))

(package! fakecygpty 
  :recipe (:fetcher github
           :repo "d5884/fakecygpty"
           :files ("*")))
#+END_SRC

#+RESULTS:
| fakecygpty      | :recipe | (fakecygpty :fetcher github :repo d5884/fakecygpty :files (*))                |
| emacs-snippets  | :recipe | (emacs-snippets :fetcher github :repo allforabit/emacs-snippets :files (*))   |
| list-processes+ |         |                                                                               |
| livid-mode      |         |                                                                               |
| lispy           |         |                                                                               |
| rich-minority   |         |                                                                               |
| ob-typescript   |         |                                                                               |
| drupal-mode     | :config | (setq drupal-drush-program c:/Bitnami/drupal-7.56-2/apps/drupal/drush/dr.bat) |

* Config
This is loaded last. Most stuff should go in here.

#+NAME: doom-drupal
#+BEGIN_SRC emacs-lisp 
#+END_SRC

** Temp mode

#+NAME: config-temp-mode
#+BEGIN_SRC emacs-lisp

;; temp-mode.el
;; Temporary minor mode
;; Main use is to enable it only in specific buffers to achieve the goal of
;; buffer-specific keymaps

(defvar temp-mode-map (make-sparse-keymap)
  "Keymap while temp-mode is active.")

;;;###autoload
(define-minor-mode temp-mode
  "A temporary minor mode to be activated only specific to a buffer."
  nil
  :lighter " Temp"
  temp-mode-map)

;; (provide 'temp-mode)

;; Source: https://emacs.stackexchange.com/questions/519/key-bindings-specific-to-a-buffer
;; Usage:
;; eval: (temp-mode 1)
;; eval: (define-key temp-mode-map (kbd "<f10>") 'function-ONE)
#+END_SRC

#+RESULTS: config-temp-mode
| keymap |

** Org
 - Make org blocks editable courtesy of Jon Kitchen technique
 - Make it possible to send org babel js to skewer mode
#+NAME: config-skewer-js
#+BEGIN_SRC js
// this code goes in skewer.js, to replace the current version of skewer.fn.eval.

/**
 ,* Handles an code evaluation request from Emacs.
 ,* @param request The request object sent by Emacs
 ,* @returns The result object to be returned to Emacs
 ,*/


skewer.fn.evalBabel = function(request) {
    var result = {
        strict: request.strict
    };
    var start = skewer.now();
    var oc = console.log;
    var strResult = '';
    try {
        if (!request.verbose) {
            console.log = function() {
                for (var i = 0; i < arguments.length; i++) {
                    if (i > 0) {
                        strResult += ' ';
                    }
                    strResult += String(arguments[i]);
                }
                strResult += '';
            };
        }
        var prefix = '';
        var value = skewer.globalEval(prefix + request.eval);
        if (!strResult) {
            strResult = skewer.safeStringify(value, request.verbose) + '';
        }
        result.value = strResult;
    } catch (error) {
        result = skewer.errorResult(error, result, request);
    } finally {
        console.log = oc;
    }
    result.time = (skewer.now() - start) / 1000;
    return result;
};



#+END_SRC

#+RESULTS: config-skewer-js

#+NAME: config-org
#+BEGIN_SRC emacs-lisp :noweb yes  
;; TODO these requires should probably be done using after and the likes
;; Check in doom project
(require 'lispy)
(require 'org-mouse)
(require 'ob-js)
(require 'cl)
(require 'rjsx-mode)

(defun a4b-org-mode-hook ()
  (setq-local yas-buffer-local-condition
              '(not (org-in-src-block-p t))))
(add-hook 'org-mode-hook #'a4b-org-mode-hook)

(defun a4b-org-babel-skewer-js-hook ()
  (insert "
<<config-skewer-js>>
"))

;; Setup org src to use more space
(set! :popup "^\\*Org Src"    '((size . 0.8)) '((quit) (select . t) (modeline . t)))

(remove-hook 'skewer-js-hook 'a4b-org-babel-skewer-js-hook)
(add-hook 'skewer-js-hook 'a4b-org-babel-skewer-js-hook)

(advice-remove 'org-babel-execute:js #'a4b-org-babel-execute:skewer)
(advice-add 'org-babel-execute:js :around 'a4b-org-babel-execute:skewer)
(defun a4b-org-babel-execute:skewer (oldFunc body params)
  (if (skewer-ping)
      (lexical-let* ((result-type (cdr (assoc :result-type params)))
                     (full-body (org-babel-expand-body:generic
                                 body params (org-babel-variable-assignments:js params)))
                     (pos (point)))
        (skewer-eval full-body (lambda (result)
                                 (let ((value))
                                   (goto-char pos)
                                   (print (alist-get 'value result))
                                   ;; (org-babel-insert-result
                                   ;;  (alist-get 'value result))
                                   )) :type "eval")
        nil)
    (apply oldFunc body params nil)))


;; https://lists.gnu.org/archive/html/emacs-orgmode/2014-06/msg00238.html
(defun a4b-org-export-remove-prelim-headlines (tree backend info)
  "Remove headlines tagged \"prelim\" while retaining their
contents before any export processing."
  (org-element-map tree org-element-all-elements
    (lambda (object)
      (when (and (equal 'headline (org-element-type object))
                 (member "prelim" (org-element-property :tags object)))
        (mapc (lambda (el)
                ;; recursively promote all nested headlines
                (org-element-map el 'headline
                  (lambda (el)
                    (when (equal 'headline (org-element-type el))
                      (org-element-put-property el
                                                :level (1- (org-element-property :level el))))))
                (org-element-insert-before el object))
              (cddr object))
        (org-element-extract-element object)))
    info nil org-element-all-elements)
  tree)

(add-hook 'org-export-filter-parse-tree-functions
          'a4b-org-export-remove-prelim-headlines)

(defcustom allforabit-src-block-keymaps
  '()
  "alist of custom keymaps for src blocks.")

(setq allforabit-src-block-keymaps
        `(("js" . ,(let ((map (make-composed-keymap `(,rjsx-mode-map
                                                      ,outline-minor-mode-map)
                                                    org-mode-map)))
                     (define-key map (kbd "C-c C-c") 'org-ctrl-c-ctrl-c)
                     map))
          ("emacs-lisp" . ,(let ((map (make-composed-keymap `(,lispy-mode-map
                                                              ,emacs-lisp-mode-map
                                                              ,outline-minor-mode-map)
                                                            org-mode-map)))
                             (define-key map (kbd "C-c C-c") 'org-ctrl-c-ctrl-c)
                             map))))

(defun allforabit-add-keymap-to-src-blocks (limit)
  "Add keymaps to src-blocks defined in `allforabit-src-block-keymaps'."
  (let ((case-fold-search t)
        lang)
    (while (re-search-forward org-babel-src-block-regexp limit t)
      (let ((lang (match-string 2))
            (beg (match-beginning 0))
            (end (match-end 0)))
        (if (assoc (org-no-properties lang) allforabit-src-block-keymaps)
            (progn
              (add-text-properties
               beg end `(local-map ,(cdr (assoc
                                          (org-no-properties lang)
                                          allforabit-src-block-keymaps))))
              (add-text-properties
               beg end `(cursor-sensor-functions
                         ((lambda (win prev-pos sym)
                            ;; This simulates a mouse click and makes a menu change
                            (org-mouse-down-mouse nil)))))))))))


(defun allforabit-spoof-mode (orig-func &rest args)
  "Advice function to spoof commands in org-mode src blocks.
It is for commands that depend on the major mode. One example is
`lispy--eval'."
  (if (org-in-src-block-p)
      (let ((major-mode (intern (format "%s-mode" (first (org-babel-get-src-block-info))))))
        (apply orig-func args))
    (apply orig-func args)))

(define-minor-mode allforabit-src-keymap-mode
  "Minor mode to add mode keymaps to src-blocks."
  :init-value nil
  (if allforabit-src-keymap-mode
      (progn
        (add-hook 'org-font-lock-hook #'allforabit-add-keymap-to-src-blocks t)
        (add-to-list 'font-lock-extra-managed-props 'local-map)
        (add-to-list 'font-lock-extra-managed-props 'cursor-sensor-functions)
        (advice-add 'lispy--eval :around 'allforabit-spoof-mode)
        (cursor-sensor-mode +1)
        (message "allforabit-src-keymap-mode enabled"))
    (remove-hook 'org-font-lock-hook #'allforabit-add-keymap-to-src-blocks)
    (advice-remove 'lispy--eval 'allforabit-spoof-mode)
    (cursor-sensor-mode -1))
  (font-lock-fontify-buffer))

;; (add-hook 'org-mode-hook (lambda ()
;; 			   (allforabit-src-keymap-mode +1)))

;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((clojure     . t)
;;    (emacs-lisp . t)))

#+END_SRC

#+RESULTS: config-org
: ~/Documents/Bitbucket/org/tmp

** Term
#+NAME: config-term
#+BEGIN_SRC emacs-lisp
;; (def-package! fakecygpty
;;   :config
;;   (message "Activating Fake cyg pty")
;;   (fakecygpty-activate))

;; (make-comint-in-buffer "cmd" nil "cmd" nil)
;; (setq explicit-shell-file-name "c:/msys64/usr/bin/bash.exe")
;; (setq shell-file-name explicit-shell-file-name)
#+END_SRC

#+RESULTS: config-term
: c:/msys64/usr/bin/bash.exe

** Services
#+NAME: config-services
#+BEGIN_SRC emacs-lisp
(after! prodigy
  (prodigy-define-service
    :name "WLB electron"
    :command "c:/Users/admin/Documents/Bitbucket/wlb/wlb-ui-desktop/node_modules/.bin/electron.cmd"
    :args '(".")
    :cwd "c:/Users/admin/Documents/Bitbucket/wlb/wlb-ui-desktop/app"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)
  (prodigy-define-service
    :name "Campus 2017"
    :command "gulp"
    :args '("watch")
    :cwd "c:/Users/admin/Documents/Bitbucket/campus/wp-content/themes/campus-theme/"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)
  (prodigy-define-service
    :name "React sandbox"
    :command "yarn"
    :args '("start")
    :cwd "c:/Users/admin/Documents/Bitbucket/org/code/js/react"
    :tags '(play)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)
(prodigy-define-service
    :name "Mailcatcher (1080, 1025)"
    :command "mailcatcher"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t))
#+END_SRC

#+RESULTS: config-services
| :name | Mailcatcher (1080, 1025) | :command | mailcatcher                                                                          | :tags | (work)  | :stop-signal | sigkill                                                                   | :kill-process-buffer-on-stop | t      |              |         |                              |   |          |                   |
| :name | React sandbox            | :command | yarn                                                                                 | :args | (start) | :cwd         | c:/Users/admin/Documents/Bitbucket/org/code/js/react                      | :tags                        | (play) | :stop-signal | sigkill | :kill-process-buffer-on-stop | t |          |                   |
| :name | Campus 2017              | :command | gulp                                                                                 | :args | (watch) | :cwd         | c:/Users/admin/Documents/Bitbucket/campus/wp-content/themes/campus-theme/ | :tags                        | (work) | :stop-signal | sigkill | :kill-process-buffer-on-stop | t |          |                   |
| :name | WLB electron             | :command | c:/Users/admin/Documents/Bitbucket/wlb/wlb-ui-desktop/node_modules/.bin/electron.cmd | :args | (.)     | :cwd         | c:/Users/admin/Documents/Bitbucket/wlb/wlb-ui-desktop/app                 | :tags                        | (work) | :stop-signal | sigkill | :kill-process-buffer-on-stop | t |          |                   |
| :name | Angular 4 sandbox        | :command | yarn                                                                                 | :args | (start) | :cwd         | ~/Documents/Github/angular4-sandbox/                                      | :tags                        | (play) | :stop-signal | sigkill | :kill-process-buffer-on-stop | t | :process | Angular 4 sandbox |


** Lookup

#+NAME: config-lookup
#+BEGIN_SRC emacs-lisp
;; (setq +lookup-open-url-fn 'eww)
#+END_SRC

#+RESULTS: config-lookup
: eww
** JS
Js is evaluated in a temporary folder, so node_path needs to be explicitly set
#+NAME: config-js
#+BEGIN_SRC emacs-lisp
(setenv "NODE_PATH"
  (concat
   "~/Documents/Bitbucket/org/node_modules" ":"
   (getenv "NODE_PATH")
  )
)

(def-package! ob-typescript)

#+END_SRC

#+RESULTS: config-js

** Conclusion
#+BEGIN_SRC emacs-lisp :tangle "~/Github/doom-emacs/modules/private/allforabit/config.el" :mkdirp yes :noweb yes
;;; private/allforabit/config.el -*- lexical-binding: t; -*-
;; (def-package! solarized-theme 
;;   :demand t
;;   :config
;;   (load-theme 'solarized-dark))
<<config-org>>
<<config-temp-mode>>
<<config-term>>
<<config-services>>
<<config-lookup>>
<<config-js>>


;; Image refresh fix
;; https://emacs.stackexchange.com/questions/2303/making-an-image-ie-image-mode-auto-reload-changes-from-disk
(add-hook 'image-mode #'auto-image-file-mode)

;; Make magit work
(set! :popup "^\\*magit" :ignore)

;; UTF-8 everywhere
(setq-default buffer-file-coding-system 'utf-8-unix)
(setq-default default-buffer-file-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)

;; Package to filter modeline items
;; TODO not working at the moment
(def-package! rich-minority
  :config
  (rich-minority-mode 1)
  (setq rm-whitelist ""))

(def-package! list-processes+)

;; ;; Don't use default snippets, use mine.
;; ;; TODO add my snippets
;; (after! yasnippet
;;   (setq yas-snippet-dirs (list "~/Github/doom-emacs/modules/private/allforabit/snippets")))

(def-package! emacs-snippets :after yasnippet)



;; Make it possible to add hashes and euro symbols
(setq mac-right-option-modifier nil)
;; from modules/completion/company/config.el
;; Drupal mode

;; (def-package! drupal-mode)

;; (def-package! psysh)
(def-package! livid-mode)
;; (def-package! ob-php)

(load! +bindings)  ; my key bindings

;;
;; (after! doom-themes
;;   ;; Since Fira Mono doesn't have an italicized variant, highlight it instead
;;   (set-face-attribute 'italic nil
;;                       :weight 'ultra-light
;;                       :foreground "#ffffff"
;;                       :background (doom-color 'current-line)))


(setq org-babel-clojure-backend 'cider)

;; app/email
(after! mu4e
  (setq smtpmail-stream-type 'starttls
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587)

  (set! :email "gmail.com"
    '((mu4e-sent-folder       . "/gmail.com/Sent Mail")
      (mu4e-drafts-folder     . "/gmail.com/Drafts")
      (mu4e-trash-folder      . "/gmail.com/Trash")
      (mu4e-refile-folder     . "/gmail.com/All Mail")
      (smtpmail-smtp-user     . "kevnolan")
      (user-mail-address      . "kevnolan@gmail.com")
      (mu4e-compose-signature . "---\nKevin Nolan")))
  )

(after! evil-escape
  (setq evil-escape-excluded-states '(normal visual multiedit emacs motion)
        evil-escape-excluded-major-modes '(neotree-mode)
        evil-escape-key-sequence "fd"
        evil-escape-delay 0.25))

#+END_SRC

* Bindings
:PROPERTIES:
:END:

#+BEGIN_SRC emacs-lisp :results code
(setq my-list '(apple orange peach))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
(apple orange peach)
#+END_SRC

#+NAME: doom-keymap
#+BEGIN_SRC emacs-lisp :results code

;; Example
;; (map!
;;  ;; --- Global keybindings ---------------------------
;;  ;; Make M-x available everywhere
;;  :nvime "M-x" #'execute-extended-command
;;  "M-+"    (λ! (text-scale-set 0))
;;  "M-="    #'text-scale-increase
;;  "M--"    #'text-scale-decrease

;;  (:prefix "C-x"
;;    "p" #'doom/other-popup)

;;  ;; --- <leader> -------------------------------------
;;  (:leader
;;    :desc "Ex command"  :nv ";"   #'evil-ex
;;    (:desc "previous..." :prefix "["
;;      :desc "Spelling correction" :n  "S" #'flyspell-correct-previous-word-generic)))

;; (org-get-header-list a4b-an-el)
;; (a4b-org-element-map (org-element-contents el) results)
(defun a4b-org-element-map (tree results)
    (org-element-map 
          tree 
          'headline
        (lambda (el) 
                (if (org-element-contents el)
                    ;; Recurse in if there's contents
                    (if (org-element-property :F el)
                        (thread-last results
                            (cons "Bo")
                            (cons (org-element-property :K el)))    
                      ;; Pass results unchanged if there's no :K
                        (a4b-org-element-map (org-element-contents el) results))
                  ;; Otherwise return heading value
                  (if (org-element-property :K el)
                    (thread-last results
                        ((lambda (res)
                           (cons (org-element-property :F el) res)
                           "Hi"
                        ))
                        (cons (org-element-property :K el)))
                        )
                    (thread-last results
                        (cons "Yo")
                        (cons (org-element-property :K el))))
                ) nil nil '(headline)))

;; a4b-an-el
(thread-first
    (a4b-org-element-map
        (org-element-parse-buffer 'headline) '())
    ;; (map!)
)
#+END_SRC

#+RESULTS: doom-keymap
#+BEGIN_SRC emacs-lisp
((nil "Yo")
 ((((nil "Yo")))
  ((nil "Yo")
   (nil "Yo"))
  (((nil "Yo")
    (nil "Yo"))))
 ((((nil "Yo"))
   ((((nil "Yo")
      ((nil "Yo")
       (nil "Yo")
       (nil "Yo")
       (nil "Yo")
       (("M-!" "Yo")
        (nil "Yo")
        (nil "Yo")
        (nil "Yo"))
       (nil "Yo")
       (nil "Yo")
       (nil "Yo")
       (nil "Yo")))))))
 ((nil "Yo")
  (nil "Yo")))
#+END_SRC

#+RESULTS:


#+BEGIN_SRC emacs-lisp :results code
;; (map!
;;   (("M-!" (lambda () (interactive) (message "hello")))))
;; (make-symbol "#'foo")

(map! 
((("M-!" 'spacemacs/alternate-buffer-in-persp)
  (nil nil)
  (nil nil)))
)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
nil
#+END_SRC


** Meta-! 
:PROPERTIES:
:K:        M-!
:F:        spacemacs/alternate-buffer-in-persp
:END:


#+BEGIN_SRC emacs-lisp
(thread-last '(5 6 7 89 9)
  (seq-map (lambda (n) (+ n 1)))
  (seq-map (lambda (n) (* n n n))))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(org-element-map (org-element-parse-buffer) 'paragraph
  (lambda (paragraph)
    (let ((parent (org-element-property :parent paragraph)))
      (and (eq (org-element-type parent) 'section)
           (let ((first-child (car (org-element-contents parent))))
             (eq first-child paragraph))
           ;; Return value.
           paragraph))))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(save-excursion
  (outline-up-heading 1) 
  (org-element-map (org-element-parse-buffer) 'section
     (lambda (section)
          (org-element-property :value section))))
#+END_SRC

#+RESULTS:



** TODO Global 
** TODO Leader 
** Raw 

#+BEGIN_SRC emacs-lisp :tangle  "~/Github/doom-emacs/modules/private/allforabit/+bindings.el" :mkdirp yes

;;; private/allforabit/+bindings.el -*- lexical-binding: t; -*-


(defun spacemacs/helm-jump-in-buffer ()
  "Jump in buffer using `imenu' facilities and helm."
  (interactive)
  (call-interactively
   (cond
    ((eq major-mode 'org-mode) 'helm-org-in-buffer-headings)
    (t 'helm-semantic-or-imenu))))

(defun spacemacs/alternate-buffer-in-persp ()
  "Switch back and forth between current and last buffer in the
  current perspective."
  (interactive)
  (with-persp-buffer-list ()
                          (switch-to-buffer (other-buffer (current-buffer) t))))

(defun spacemacs/persp-helm-mini ()
  "As `helm-mini' but restricts visible buffers by perspective."
  (interactive)
  (with-persp-buffer-list ()
                          (helm-mini)))

(map!
 (:leader
   :desc "Execute extended command"    :n "SPC" #'execute-extended-command
   :desc "Switch to last buffer" :n "TAB"   #'spacemacs/alternate-buffer-in-persp
   (:desc "buffer" :prefix "b"
     :desc "Switch workspace buffer" :n "b" #'persp-switch-to-buffer
     :desc "Kill buffer"             :n "d" #'kill-this-buffer)

   (:desc "eval" :prefix "e"
     :desc "List errors"               :n  "x" #'flycheck-list-errors
     :desc "Evaluate buffer/region"    :n  "e" #'+eval/buffer
                                       :v  "e" #'+eval/region
     :desc "Evaluate & replace region" :nv "E" #'+eval:replace-region
     :desc "Build tasks"               :nv "b" #'+eval/build
     :desc "Jump to definition"        :n  "d" #'+jump/definition
     :desc "Jump to references"        :n  "D" #'+jump/references
     :desc "Open REPL"                 :n  "r" #'+eval/open-repl
                                       :v  "r" #'+eval:repl)
   ;; TODO may not be the best use of j prefix
   (:desc "Jumping" :prefix "j"
     :desc "Jump in" :nv "i" #'imenu
     :desc "Jump in" :nv "I" #'imenu-anywhere
     :desc "Jump to" :nv "j" #'evil-avy-goto-char
     :desc "Jump to 2 char" :nv "J" #'evil-avy-goto-char-2)

   (:desc "File" :prefix "f"
     :desc "Save file" :nv "s" #'save-buffer
     :desc "Find file" :nv "f" #'counsel-find-file)

   ;; Change to spacemacs prefix
   (:desc "workspace" :prefix "l"
     :desc "Display tab bar"          :n "TAB" #'+workspace/display
     :desc "New workspace"            :n "n"   #'+workspace/new
     :desc "Restore workspace from file" :n "r"   #'+workspace/load
     :desc "Restore last session"        :n "R"   (λ! (+workspace/load-session))
     :desc "Save workspace to file"   :n "s"   #'+workspace/save
     :desc "Autosave current session" :n "S"   #'+workspace/save-session
     :desc "Switch workspace"         :n "l"   #'+workspace/switch-to
     :desc "Kill all buffers"         :n "x"   #'doom/kill-all-buffers
     :desc "Delete session"           :n "X"   #'+workspace/kill-session
     :desc "Delete this workspace"    :n "d"   #'+workspace/delete
     :desc "Load session"             :n "L"   #'+workspace/load-session
     :desc "Next workspace"           :n "]"   #'+workspace/switch-right
     :desc "Previous workspace"       :n "["   #'+workspace/switch-left
     :desc "Switch to 1st workspace"  :n "1"   (λ! (+workspace/switch-to 0))
     :desc "Switch to 2nd workspace"  :n "2"   (λ! (+workspace/switch-to 1))
     :desc "Switch to 3rd workspace"  :n "3"   (λ! (+workspace/switch-to 2))
     :desc "Switch to 4th workspace"  :n "4"   (λ! (+workspace/switch-to 3))
     :desc "Switch to 5th workspace"  :n "5"   (λ! (+workspace/switch-to 4))
     :desc "Switch to 6th workspace"  :n "6"   (λ! (+workspace/switch-to 5))
     :desc "Switch to 7th workspace"  :n "7"   (λ! (+workspace/switch-to 6))
     :desc "Switch to 8th workspace"  :n "8"   (λ! (+workspace/switch-to 7))
     :desc "Switch to 9th workspace"  :n "9"   (λ! (+workspace/switch-to 8))
     :desc "Switch to last workspace" :n "0"   #'+workspace/switch-to-last)
   
   (:desc "open" :prefix "o"
          :desc "Terminal"              :n  "t" #'+eshell/open-popup
          :desc "Terminal in project"   :n  "T" #'projectile-run-eshell)
   
   (:desc "project" :prefix "p"
          :desc "Pop term in project"     :n  "o" #'projectile-run-eshell)
   
   )
(:map evil-window-map ; prefix "C-w"
        "C"     #'ace-delete-window)

  (:map evil-window-map ; prefix "C-w"
        "C"     #'ace-delete-window)

  ;; ivy
  ;; May not need to redefine all these
  (:after ivy
    :map ivy-minibuffer-map
    "C-h" #'ivy-backward-delete-char)

 
  ;; Add j/k bindings
  (:after company
    (:map company-active-map
      ;; Don't interfere with `evil-delete-backward-word' in insert mode
      "C-w"        nil
      "C-o"        #'company-search-kill-others
      "C-j"        #'company-select-next
      "C-k"        #'company-select-previous
      "C-l"        #'company-complete-selection)
    ;; Automatically applies to `company-filter-map'
    (:map company-search-map
      "C-j"        #'company-search-repeat-forward
      "C-k"        #'company-search-repeat-backward)))
    #+END_SRC

        #+RESULTS:
        : company-search-repeat-backward

        
#+BEGIN_SRC emacs-lisp

#+END_SRC

* Git ignore

#+BEGIN_SRC txt :tangle "~/Github/doom-emacs/modules/private/allforabit/.gitignore" :mkdirp yes
snippets
.authinfo.gpg
#+END_SRC

#+BEGIN_SRC emacs-lisp
(message "hi")
#+END_SRC

#+RESULTS:
: hi

#+BEGIN_SRC js
return 17 + 201;
#+END_SRC

#+RESULTS:
: 218
