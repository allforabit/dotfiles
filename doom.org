* Introduction
Emacs config based on doom emacs. All config is divided up as much as is possible.
** Ideas
- Make source block keys work only when entering insert mode
- In general see if there are ways to take advantage of evil setup in org mode
- Get rid of emacs keybindings completely and only leave evil bindings
* Emacs init
This bootstraps doom and sets up a few things thtat this depends on such as the
username.

Only real updates to this should be to add doom modules and the likes.

#+BEGIN_SRC emacs-lisp :tangle "~/Github/doom-emacs/init.el" :mkdirp yes
  ;;; init.el -*- lexical-binding: t; -*-
  ;;
  ;; Author:  Henrik Lissner <henrik@lissner.net>
  ;; URL:     https://github.com/allforabit/.emacs.d
  ;;
  ;;   =================     ===============     ===============   ========  ========
  ;;   \\ . . . . . . .\\   //. . . . . . .\\   //. . . . . . .\\  \\. . .\\// . . //
  ;;   ||. . ._____. . .|| ||. . ._____. . .|| ||. . ._____. . .|| || . . .\/ . . .||
  ;;   || . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||
  ;;   ||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||
  ;;   || . .||   ||. _-|| ||-_ .||   ||. . || || . .||   ||. _-|| ||-_.|\ . . . . ||
  ;;   ||. . ||   ||-'  || ||  `-||   || . .|| ||. . ||   ||-'  || ||  `|\_ . .|. .||
  ;;   || . _||   ||    || ||    ||   ||_ . || || . _||   ||    || ||   |\ `-_/| . ||
  ;;   ||_-' ||  .|/    || ||    \|.  || `-_|| ||_-' ||  .|/    || ||   | \  / |-_.||
  ;;   ||    ||_-'      || ||      `-_||    || ||    ||_-'      || ||   | \  / |  `||
  ;;   ||    `'         || ||         `'    || ||    `'         || ||   | \  / |   ||
  ;;   ||            .===' `===.         .==='.`===.         .===' /==. |  \/  |   ||
  ;;   ||         .=='   \_|-_ `===. .==='   _|_   `===. .===' _-|/   `==  \/  |   ||
  ;;   ||      .=='    _-'    `-_  `='    _-'   `-_    `='  _-'   `-_  /|  \/  |   ||
  ;;   ||   .=='    _-'          '-__\._-'         '-_./__-'         `' |. /|  |   ||
  ;;   ||.=='    _-'                                                     `' |  /==.||
  ;;   =='    _-'                                                            \/   `==
  ;;   \   _-'                                                                `-_   /
  ;;    `''                                                                      ``'
  ;;
  ;; These demons are not part of GNU Emacs.
  ;;
  ;;; License: MIT

  (require 'core (concat user-emacs-directory "core/core"))

  ;; (setq user-login-name "allforabit")

  ;; Utf-8 
  ;; (prefer-coding-system 'utf-8)
  ;; (set-default-coding-systems 'utf-8)
  ;; (set-language-environment 'utf-8)
  ;; (set-selection-coding-system 'utf-8)

  ;; Setup path (windows only for now)
  (when (string-equal system-type "windows-nt")
    (setenv "PATH"
      (concat
      ;; "C:/msys64/mingw64/bin" ";"
      "C:/msys64/usr/bin" ";"
      (getenv "PATH"))))


  (doom! :feature
          evil            ; come to the dark side, we have cookies
          jump            ; helping you get around
          services
          snippets        ; my elves. They type so I don't have to
          file-templates  ; auto-snippets for empty files
          hydra           ; keybindings that stick around
          spellcheck      ; tasing you for misspelling mispelling
          syntax-checker  ; tasing you for every semicolon you forget
          version-control ; remember, remember that commit in November
          workspaces      ; tab emulation, persistence & separate workspaces
          eval            ; repls, runners 'n builders; run code, run
          ;debug           ; FIXME stepping through code, to help you add bugs

          :completion
          company         ; the ultimate code completion backend
          ivy             ; a search engine for love and life
          ;helm            ; the *other* search engine for love and life
          ;ido             ; the other *other* search engine...

          :ui
          doom            ; what makes DOOM look the way it does
          doom-dashboard  ; a nifty splash screen for Emacs
          ;; doom-modeline   ; a snazzy Atom-inspired mode-line
          doom-quit       ; DOOM quit-message prompts when you quit Emacs
          hl-todo         ; highlight TODO/FIXME/NOTE tags
          nav-flash       ; blink the current line after jumping
          evil-goggles    ; display visual hints when editing in evil
          (window-select +ace-window)
          unicode         ; extended unicode support for various languages
          ;tabbar          ; FIXME an (incomplete) tab bar for Emacs

          :lang
          (org              ; organize your plain life in plain text
                              +attach          ; custom attachment system
                              +babel           ; running code in org
                              +capture         ; org-capture in and outside of Emacs
                              +export          ; centralized export system + more backends
                              +present         ; Emacs for presentations
                              ;; TODO +publish
                              )
          ;assembly        ; assembly for fun or debugging
          ;cc              ; C/C++/Obj-C madness
          clojure
          ;crystal         ; ruby at the speed of c
          ;csharp          ; unity, .NET, and mono shenanigans
          data            ; config/data formats
          ;elixir          ; erlang done right
          ;elm             ; care for a cup of TEA?
          emacs-lisp      ; drown in parentheses
          ;go              ; the hipster dialect
          haskell         ; a language that's lazier than I am
          ;hy              ; readability of scheme w/ speed of python
          java            ; the poster child for carpal tunnel syndrome
          javascript      ; all(hope(abandon(ye(who(enter(here))))))
          ;julia           ; a better, faster MATLAB
          latex           ; writing papers in Emacs has never been so fun
          ledger          ; an accounting system in Emacs
          ;lua             ; one-based indices? one-based indices
          markdown        ; writing docs for people to ignore
          ;ocaml           ; an objective camel
          ;perl            ; write code no one else can comprehend
          php             ; make php less awful to work with
          plantuml        ; diagrams for confusing people more
          ;purescript      ; javascript, but functional
          ;python          ; beautiful is better than ugly
          rest            ; Emacs as a REST client
          ;ruby            ; 1.step do {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
          ;rust            ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
          ;scala           ; java, but good
          sh              ; she sells (ba|z)sh shells on the C xor
          ;swift           ; who asked for emoji variables?
          ;typescript      ; javascript, but better
          web             ; the tubes
          :tools
          dired           ; making dired pretty [functional]
          electric-indent ; smarter, keyword-based electric-indent
          eshell          ; a consistent, cross-platform shell (WIP)
          gist            ; interacting with github gists
          impatient-mode  ; show off code over HTTP
          ;macos           ; MacOS-specific commands
          neotree         ; a project drawer, like NERDTree for vim
          password-store  ; password manager for nerds
          rotate-text     ; cycle region at point between text candidates
          term            ; terminals in Emacs
          tmux            ; an API for interacting with tmux
          upload          ; map local to remote projects via ssh/ftp


          ;; Applications are complex and opinionated modules that transform Emacs
          ;; toward a specific purpose. They may have additional dependencies and
          ;; should be loaded last.
          :app
          email           ; emacs as an email client
          irc             ; how neckbeards socialize
          rss             ; emacs as an RSS reader
          twitter         ; twitter client https://twitter.com/vnought
          write           ; emacs as a word processor (latex + org + markdown)

          ;; Private modules named after your username are loaded automatically.
          ;; Leaving this here is harmless though. Also, they are omitted from
          ;; source control (except for mine; use it as a reference).
          ;; original value: allforabit
          :private
          ;; hlissner
          allforabit
          )

        #+END_SRC

        #+RESULTS:
        : Doom modules initialized

* Private init
The private init is run before all other modules.
#+BEGIN_SRC emacs-lisp :tangle "~/Github/doom-emacs/modules/private/allforabit/init.el" :mkdirp yes
;;; private/allforabit/init.el -*- lexical-binding: t; -*-

;; I've swapped these keys on my keyboard
(setq x-super-keysym 'alt
      x-alt-keysym   'meta
      user-mail-address "kevnolan@gmail.com"
      user-full-name    "Kevin Nolan")


;; Org stuff
(setq +org-dir "~/Bitbucket/org/")

(after! org
  ;; TODO Figure out how to get this to work
  ;; This isn't working and is taking over other modes
  ;; (map! (:mode org-mode (:map ivy-mode-map
  ;;       [remap imenu] #'counsel-org-goto)))
  (setq org-ellipsis "â€¦"))

(setq org-default-notes-file (concat +org-dir "notes.org")
      org-capture-templates
      '(("t" "Todo" entry
         (file+headline (expand-file-name "gtd.org" +org-dir) "Inbox")
         "* [ ] %?\n%i" :prepend t :kill-buffer t)
        ("c" "Code journal" entry (file+olp+datetree "~/Bitbucket/org/code.org" "Journal")
         "* %?\nEntered on %U\n  %i\n  %a"
         :jump-to-captured t)
        ("n" "Notes" entry
         (file+headline org-default-notes-file "Inbox")
         "* %u %?\n%i" :prepend t :kill-buffer t)))

;; Use git bash for shell
;; TODO maybe should be msys2??
;; (setq explicit-shell-file-name
;;       "C:/Program Files (x86)/Git/bin/bash.exe")
;; (setq shell-file-name explicit-shell-file-name)
;; (add-to-list 'exec-path "C:/Program Files (x86)/Git/bin")

;; An extra measure to prevent the flash of unstyled mode-line while Emacs is
;; booting up (when Doom is byte-compiled).
;; (setq-default mode-line-format nil)
;; TODO try Fira Mono
(setq doom-big-font (font-spec :family "Source Code Pro" :size 19))
(setq doom-font (font-spec :family "Source Code Pro" :size 13)
      doom-variable-pitch-font (font-spec :family "Georgia")
      doom-unicode-font (font-spec :family "Symbola")
      ;; ui/doom-modeline
      +doom-modeline-height 23
      ;; `doom-themes'
      doom-neotree-enable-variable-pitch nil
      doom-neotree-project-size 1.2
      doom-neotree-line-spacing 0
      doom-neotree-folder-size 1.0
      doom-neotree-chevron-size 0.6)

;; Overide workspace tabline to use correct number
;; TODO Remove when added
(defun +workspace--tabline (&optional names)
  (let ((names (or names (+workspace-list-names)))
        (current-name (+workspace-current-name)))
    (mapconcat
     #'identity
     (cl-loop for name in names
              for i to (length names)
              collect
              (propertize (format " [%d] %s " (+ i 1) name)
                          'face (if (equal current-name name)
                                    '+workspace-tab-selected-face
                                  '+workspace-tab-face)))
     " ")))

#+END_SRC

#+RESULTS:
: +workspace--tabline
* Packages  
** Management
*** [ ] Add image+
 https://github.com/mhayashi1120/Emacs-imagex
*** [ ] Add ahk
https://melpa.org/#/ahk-mode
** Main
The packages to install go here.

#+BEGIN_SRC emacs-lisp :tangle  "~/Github/doom-emacs/modules/private/allforabit/packages.el" :mkdirp yes
;; TODO should config not be in config.el
(package! drupal-mode
 :config
 (setq drupal-drush-program "c:/Bitnami/drupal-7.56-2/apps/drupal/drush/dr.bat"))

(package! rich-minority)
(package! lispy)
(package! psysh)
(package! livid-mode)
(package! ob-php)

;; (package! solarized-theme)

;; (package! org-trello)
#+END_SRC

#+RESULTS:
| psysh         |         |                                                                               |
| lispy         |         |                                                                               |
| rich-minority |         |                                                                               |
| drupal-mode   | :config | (setq drupal-drush-program c:/Bitnami/drupal-7.56-2/apps/drupal/drush/dr.bat) |

* Config
This is loaded last. Most stuff should go in here.

#+NAME: doom-drupal
#+BEGIN_SRC emacs-lisp 
#+END_SRC

** Org
 - Make org blocks editable courtesy of Jon Kitchen technique
#+NAME: config-org
#+BEGIN_SRC emacs-lisp
(require 'lispy)
(require 'org-mouse)

(defcustom allforabit-src-block-keymaps
  '()
  "alist of custom keymaps for src blocks.")

(setq allforabit-src-block-keymaps
      `(("emacs-lisp" . ,(let ((map (make-composed-keymap `(,lispy-mode-map
							    ,emacs-lisp-mode-map
							    ,outline-minor-mode-map)
							  org-mode-map)))
			   (define-key map (kbd "C-c C-c") 'org-ctrl-c-ctrl-c)
			   map))))

(defun allforabit-add-keymap-to-src-blocks (limit)
  "Add keymaps to src-blocks defined in `allforabit-src-block-keymaps'."
  (let ((case-fold-search t)
	lang)
    (while (re-search-forward org-babel-src-block-regexp limit t)
      (let ((lang (match-string 2))
	    (beg (match-beginning 0))
	    (end (match-end 0)))
	(if (assoc (org-no-properties lang) allforabit-src-block-keymaps)
	    (progn
	      (add-text-properties
	       beg end `(local-map ,(cdr (assoc
					  (org-no-properties lang)
					  allforabit-src-block-keymaps))))
	      (add-text-properties
	       beg end `(cursor-sensor-functions
			 ((lambda (win prev-pos sym)
			    ;; This simulates a mouse click and makes a menu change
			    (org-mouse-down-mouse nil)))))))))))


(defun allforabit-spoof-mode (orig-func &rest args)
  "Advice function to spoof commands in org-mode src blocks.
It is for commands that depend on the major mode. One example is
`lispy--eval'."
  (if (org-in-src-block-p)
      (let ((major-mode (intern (format "%s-mode" (first (org-babel-get-src-block-info))))))
	(apply orig-func args))
    (apply orig-func args)))

(define-minor-mode allforabit-src-keymap-mode
  "Minor mode to add mode keymaps to src-blocks."
  :init-value nil
  (if allforabit-src-keymap-mode
      (progn
	(add-hook 'org-font-lock-hook #'allforabit-add-keymap-to-src-blocks t)
	(add-to-list 'font-lock-extra-managed-props 'local-map)
	(add-to-list 'font-lock-extra-managed-props 'cursor-sensor-functions)
	(advice-add 'lispy--eval :around 'allforabit-spoof-mode)
	(cursor-sensor-mode +1)
	(message "allforabit-src-keymap-mode enabled"))
    (remove-hook 'org-font-lock-hook #'allforabit-add-keymap-to-src-blocks)
    (advice-remove 'lispy--eval 'allforabit-spoof-mode)
    (cursor-sensor-mode -1))
  (font-lock-fontify-buffer))

(add-hook 'org-mode-hook (lambda ()
			   (allforabit-src-keymap-mode +1)))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((clojure     . t)))
#+END_SRC

#+RESULTS: config-org

** Conclusion
#+BEGIN_SRC emacs-lisp :tangle "~/Github/doom-emacs/modules/private/allforabit/config.el" :mkdirp yes :noweb yes
;;; private/allforabit/config.el -*- lexical-binding: t; -*-
;; (def-package! solarized-theme 
;;   :demand t
;;   :config
;;   (load-theme 'solarized-dark))
<<config-org>>


;; Package to filter modeline items
;; TODO not working at the moment
(def-package! rich-minority
  :config
  (rich-minority-mode 1)
  (setq rm-whitelist ""))

;; Don't use default snippets, use mine.
;; TODO add my snippets
(after! yasnippet
  (setq yas-snippet-dirs (list "~/Github/doom-emacs/modules/private/allforabit/snippets")))

(after! prodigy
  (prodigy-define-service
    :name "WLB electron"
    :command "c:/Users/admin/Documents/Bitbucket/wlb/wlb-ui-desktop/node_modules/.bin/electron.cmd"
    :args '(".")
    :cwd "c:/Users/admin/Documents/Bitbucket/wlb/wlb-ui-desktop/app"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)
  (prodigy-define-service
    :name "Campus 2017"
    :command "gulp"
    :args '("watch")
    :cwd "c:/Users/admin/Documents/Bitbucket/campus/wp-content/themes/campus-theme/"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)
(prodigy-define-service
    :name "Mailcatcher (1080, 1025)"
    :command "mailcatcher"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t))

;; Make it possible to add hashes and euro symbols
(setq mac-right-option-modifier nil)
;; from modules/completion/company/config.el
;; Drupal mode

(def-package! drupal-mode)

(def-package! psysh)
(def-package! livid-mode)
(def-package! ob-php)

(when (featurep! :feature evil)
  (load! +bindings)  ; my key bindings
  (load! +commands)) ; my custom ex commands

(defvar +allforabit-dir (file-name-directory load-file-name))
(defvar +allforabit-snippets-dir (expand-file-name "snippets/" +allforabit-dir))

(setq epa-file-encrypt-to user-mail-address
      auth-sources (list (expand-file-name ".authinfo.gpg" +allforabit-dir))
      +doom-modeline-buffer-file-name-style 'relative-from-project)

(defun +allforabit*no-authinfo-for-tramp (orig-fn &rest args)
  "Don't look into .authinfo for local sudo TRAMP buffers."
  (let ((auth-sources (if (equal tramp-current-method "sudo") nil auth-sources)))
    (apply orig-fn args)))
(advice-add #'tramp-read-passwd :around #'+allforabit*no-authinfo-for-tramp)

;;
(after! smartparens
  ;; Auto-close more conservatively
  (let ((unless-list '(sp-point-before-word-p
                       sp-point-after-word-p
                       sp-point-before-same-p)))
    (sp-pair "'"  nil :unless unless-list)
    (sp-pair "\"" nil :unless unless-list))
  (sp-pair "{" nil :post-handlers '(("||\n[i]" "RET") ("| " " "))
           :unless '(sp-point-before-word-p sp-point-before-same-p))
  (sp-pair "(" nil :post-handlers '(("||\n[i]" "RET") ("| " " "))
           :unless '(sp-point-before-word-p sp-point-before-same-p))
  (sp-pair "[" nil :post-handlers '(("| " " "))
           :unless '(sp-point-before-word-p sp-point-before-same-p)))


;;
(after! doom-themes
  ;; Since Fira Mono doesn't have an italicized variant, highlight it instead
  (set-face-attribute 'italic nil
                      :weight 'ultra-light
                      :foreground "#ffffff"
                      :background (doom-color 'current-line)))


(after! evil-mc
  ;; if I'm in insert mode, chances are I want cursors to resume
  (add-hook! 'evil-mc-before-cursors-created
    (add-hook 'evil-insert-state-entry-hook #'evil-mc-resume-cursors nil t))
  (add-hook! 'evil-mc-after-cursors-deleted
    (remove-hook 'evil-insert-state-entry-hook #'evil-mc-resume-cursors t)))

(after! evil-escape
  (setq evil-escape-excluded-states '(normal visual multiedit emacs motion)
        evil-escape-excluded-major-modes '(neotree-mode)
        evil-escape-key-sequence "fd"
        evil-escape-delay 0.25))



;; app/irc
;; (after! circe
;;   (setq +irc-notifications-watch-strings '("v0" "vnought" "allforabit"))

;;   (set! :irc "irc.snoonet.org"
;;     `(:tls t
;;       :nick "v0"
;;       :port 6697
;;       :sasl-username ,(+pass-get-user "irc/snoonet.org")
;;       :sasl-password ,(+pass-get-secret "irc/snoonet.org")
;;       :channels (:after-auth "#ynought"))))

;; app/email
(after! mu4e
  (setq smtpmail-stream-type 'starttls
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587)

  (set! :email "gmail.com"
    '((mu4e-sent-folder       . "/gmail.com/Sent Mail")
      (mu4e-drafts-folder     . "/gmail.com/Drafts")
      (mu4e-trash-folder      . "/gmail.com/Trash")
      (mu4e-refile-folder     . "/gmail.com/All Mail")
      (smtpmail-smtp-user     . "kevnolan")
      (user-mail-address      . "kevnolan@gmail.com")
      (mu4e-compose-signature . "---\nKevin Nolan")))
  )

#+END_SRC

* [ ] Bindings
:PROPERTIES:
:END:

#+BEGIN_SRC emacs-lisp :results code
(setq my-list '(apple orange peach))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
(apple orange peach)
#+END_SRC

#+NAME: doom-keymap
#+BEGIN_SRC emacs-lisp :results code

;; Example
;; (map!
;;  ;; --- Global keybindings ---------------------------
;;  ;; Make M-x available everywhere
;;  :nvime "M-x" #'execute-extended-command
;;  "M-+"    (Î»! (text-scale-set 0))
;;  "M-="    #'text-scale-increase
;;  "M--"    #'text-scale-decrease

;;  (:prefix "C-x"
;;    "p" #'doom/other-popup)

;;  ;; --- <leader> -------------------------------------
;;  (:leader
;;    :desc "Ex command"  :nv ";"   #'evil-ex
;;    (:desc "previous..." :prefix "["
;;      :desc "Spelling correction" :n  "S" #'flyspell-correct-previous-word-generic)))

;; (org-get-header-list a4b-an-el)
;; (a4b-org-element-map (org-element-contents el) results)
(defun a4b-org-element-map (tree results)
    (org-element-map 
          tree 
          'headline
        (lambda (el) 
                (if (org-element-contents el)
                    ;; Recurse in if there's contents
                    (if (org-element-property :F el)
                        (thread-last results
                            (cons "Bo")
                            (cons (org-element-property :K el)))    
                      ;; Pass results unchanged if there's no :K
                        (a4b-org-element-map (org-element-contents el) results))
                  ;; Otherwise return heading value
                  (if (org-element-property :K el)
                    (thread-last results
                        ((lambda (res)
                           (cons (org-element-property :F el) res)
                           "Hi"
                        ))
                        (cons (org-element-property :K el)))
                        )
                    (thread-last results
                        (cons "Yo")
                        (cons (org-element-property :K el))))
                ) nil nil '(headline)))

;; a4b-an-el
(thread-first
    (a4b-org-element-map
        (org-element-parse-buffer 'headline) '())
    ;; (map!)
)
#+END_SRC

#+RESULTS: doom-keymap
#+BEGIN_SRC emacs-lisp
((nil "Yo")
 ((((nil "Yo")))
  ((nil "Yo")
   (nil "Yo"))
  (((nil "Yo")
    (nil "Yo"))))
 ((((nil "Yo"))
   ((((nil "Yo")
      ((nil "Yo")
       (nil "Yo")
       (nil "Yo")
       (nil "Yo")
       (("M-!" "Yo")
        (nil "Yo")
        (nil "Yo")
        (nil "Yo"))
       (nil "Yo")
       (nil "Yo")
       (nil "Yo")
       (nil "Yo")))))))
 ((nil "Yo")
  (nil "Yo")))
#+END_SRC

#+RESULTS:


#+BEGIN_SRC emacs-lisp :results code
;; (map!
;;   (("M-!" (lambda () (interactive) (message "hello")))))
;; (make-symbol "#'foo")

(map! 
((("M-!" 'spacemacs/alternate-buffer-in-persp)
  (nil nil)
  (nil nil)))
)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
nil
#+END_SRC


** Meta-! 
:PROPERTIES:
:K:        M-!
:F:        spacemacs/alternate-buffer-in-persp
:END:


#+BEGIN_SRC emacs-lisp
(thread-last '(5 6 7 89 9)
  (seq-map (lambda (n) (+ n 1)))
  (seq-map (lambda (n) (* n n n))))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(org-element-map (org-element-parse-buffer) 'paragraph
  (lambda (paragraph)
    (let ((parent (org-element-property :parent paragraph)))
      (and (eq (org-element-type parent) 'section)
           (let ((first-child (car (org-element-contents parent))))
             (eq first-child paragraph))
           ;; Return value.
           paragraph))))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(save-excursion
  (outline-up-heading 1) 
  (org-element-map (org-element-parse-buffer) 'section
     (lambda (section)
          (org-element-property :value section))))
#+END_SRC

#+RESULTS:



** TODO Global 
** TODO Leader 
** Raw 

#+BEGIN_SRC emacs-lisp :tangle  "~/Github/doom-emacs/modules/private/allforabit/+bindings.el" :mkdirp yes

;;; private/allforabit/+bindings.el -*- lexical-binding: t; -*-

(defmacro find-file-in! (path &optional project-p)
  "Returns an interactive function for searching files."
  `(lambda () (interactive)
     (let ((default-directory ,path))
       (call-interactively
        ',(command-remapping
           (if project-p
               #'projectile-find-file
             #'find-file))))))

(map!
 [remap evil-jump-to-tag] #'projectile-find-tag
 [remap find-tag]         #'projectile-find-tag
 ;; ensure there are no conflicts
 :nmvo doom-leader-key nil
 :nmvo doom-localleader-key nil)


(defun spacemacs/helm-jump-in-buffer ()
  "Jump in buffer using `imenu' facilities and helm."
  (interactive)
  (call-interactively
   (cond
    ((eq major-mode 'org-mode) 'helm-org-in-buffer-headings)
    (t 'helm-semantic-or-imenu))))

(defun spacemacs/alternate-buffer-in-persp ()
  "Switch back and forth between current and last buffer in the
current perspective."
  (interactive)
  (with-persp-buffer-list ()
                          (switch-to-buffer (other-buffer (current-buffer) t))))

(defun spacemacs/persp-helm-mini ()
  "As `helm-mini' but restricts visible buffers by perspective."
  (interactive)
  (with-persp-buffer-list ()
                          (helm-mini)))

(map! :nv ";" #'evil-ex)

(map!
 ;; --- Global keybindings ---------------------------
 ;; :nvm "," (kbd "<spc> m")
 ;; Make M-x available everywhere
 :nvime "M-x" #'execute-extended-command
 :nvime "A-x" #'execute-extended-command
 ;; Emacs debug utilities
 "M-;"        #'eval-expression
 :nvime "M-;" #'eval-expression
 "M-:"        #'doom/open-scratch-buffer
 :nvime "M-:" #'doom/open-scratch-buffer
 ;; Text-scaling
 "M-+"    (Î»! (text-scale-set 0))
 "M-="    #'text-scale-increase
 "M--"    #'text-scale-decrease
 ;; Simple window navigation/manipulation
 "C-`"    #'doom/popup-toggle
 "C-~"    #'doom/popup-raise
 "M-t"    #'+workspace/new
 "M-T"    #'+workspace/display
 "M-w"    #'delete-window
 "M-W"    #'+workspace/close-workspace-or-frame
 "M-n"    #'evil-buffer-new
 "M-N"    #'make-frame
 "M-1"    (Î»! (+workspace/switch-to 0))
 "M-2"    (Î»! (+workspace/switch-to 1))
 "M-3"    (Î»! (+workspace/switch-to 2))
 "M-4"    (Î»! (+workspace/switch-to 3))
 "M-5"    (Î»! (+workspace/switch-to 4))
 "M-6"    (Î»! (+workspace/switch-to 5))
 "M-7"    (Î»! (+workspace/switch-to 6))
 "M-8"    (Î»! (+workspace/switch-to 7))
 "M-9"    (Î»! (+workspace/switch-to 8))
 "M-0"    #'+workspace/switch-to-last
 ;; Other sensible, textmate-esque global bindings
 "M-r"    #'+eval/buffer
 "M-R"    #'+eval/region-and-replace
 "M-b"    #'+eval/build
 "M-a"    #'mark-whole-buffer
 "M-c"    #'evil-yank
 "M-q"    (if (daemonp) #'delete-frame #'save-buffers-kill-emacs)
 "M-s"    #'save-buffer
 "M-v"    #'clipboard-yank
 "M-f"    #'helm-swoop
 "C-M-f"  #'doom/toggle-fullscreen
 :m "A-j" #'+allforabit:multi-next-line
 :m "A-k" #'+allforabit:multi-previous-line
 :m "'"   #'evil-snipe-repeat-reverse
 :nv "C-SPC" #'+evil:fold-toggle
 ;; Easier window navigation
 :en "C-h"    #'evil-window-left
 :en "C-j"    #'evil-window-down
 :en "C-k"    #'evil-window-up
 :en "C-l"    #'evil-window-right

 (:prefix "C-x"
   "p" #'doom/other-popup)


 ;; (:desc "Minor mode" :prefix ","
 ;;   :m "p" #'spacemacs/alternate-buffer-in-persp)
 ;; --- <leader> -------------------------------------
 (:leader
   :desc "Ex command"  :nv ";"   #'evil-ex
   :desc "M-x"         :nv ":"   #'execute-extended-command
   :desc "Pop up scratch buffer"   :nv "x"  #'doom/open-scratch-buffer
   :desc "Org Capture"             :nv "X"  #'+org-capture/open

   ;; Most commonly used
   :desc "Execute extended command"    :n "SPC" #'execute-extended-command
   :desc "Switch workspace buffer" :n ","   #'persp-switch-to-buffer
   :desc "Switch buffer"           :n "<"   #'switch-to-buffer
   :desc "Browse files"            :n "."   #'find-file
   :desc "Toggle last popup"       :n "~"   #'doom/popup-toggle
   :desc "Eval expression"         :n "`"   #'eval-expression
   :desc "Blink cursor line"       :n "DEL" #'+doom/blink-cursor
   :desc "Jump to bookmark"        :n "RET" #'bookmark-jump

   :desc "Jump to bookmark"        :n "'" #'+eshell/open-popup

   ;; C-u is used by evil
   :desc "Universal argument"    :n "u"  #'universal-argument
   :desc "window"                :n "w"  evil-window-map

   :desc "Switch to 1st workspace"  :n "1"   (Î»! (+workspace/switch-to 0))
   :desc "Switch to 2nd workspace"  :n "2"   (Î»! (+workspace/switch-to 1))
   :desc "Switch to 3rd workspace"  :n "3"   (Î»! (+workspace/switch-to 2))
   :desc "Switch to 4th workspace"  :n "4"   (Î»! (+workspace/switch-to 3))
   :desc "Switch to 5th workspace"  :n "5"   (Î»! (+workspace/switch-to 4))
   :desc "Switch to 6th workspace"  :n "6"   (Î»! (+workspace/switch-to 5))
   :desc "Switch to 7th workspace"  :n "7"   (Î»! (+workspace/switch-to 6))
   :desc "Switch to 8th workspace"  :n "8"   (Î»! (+workspace/switch-to 7))
   :desc "Switch to 9th workspace"  :n "9"   (Î»! (+workspace/switch-to 8))
   :desc "Switch to last workspace" :n "0"   #'+workspace/switch-to-last

   :desc "Switch to last buffer" :n "TAB"   #'spacemacs/alternate-buffer-in-persp


   (:desc "previous..." :prefix "["
     :desc "Text size"           :nv "[" #'text-scale-decrease
     :desc "Buffer"              :nv "b" #'doom/previous-buffer
     :desc "Diff Hunk"           :nv "d" #'git-gutter:previous-hunk
     :desc "Todo"                :nv "t" #'hl-todo-previous
     :desc "Error"               :nv "e" #'previous-error
     :desc "Workspace"           :nv "w" #'+workspace/switch-left
     :desc "Smart jump"          :nv "h" #'smart-backward
     :desc "Spelling error"      :nv "s" #'evil-prev-flyspell-error
     :desc "Spelling correction" :n  "S" #'flyspell-correct-previous-word-generic)

   (:desc "next..." :prefix "]"
     :desc "Text size"           :nv "]" #'text-scale-increase
     :desc "Buffer"              :nv "b" #'doom/next-buffer
     :desc "Diff Hunk"           :nv "d" #'git-gutter:next-hunk
     :desc "Todo"                :nv "t" #'hl-todo-next
     :desc "Error"               :nv "e" #'next-error
     :desc "Workspace"           :nv "w" #'+workspace/switch-right
     :desc "Smart jump"          :nv "l" #'smart-forward
     :desc "Spelling error"      :nv "s" #'evil-next-flyspell-error
     :desc "Spelling correction" :n  "S" #'flyspell-correct-word-generic)

   (:desc "buffer" :prefix "b"
     :desc "New empty buffer"        :n "n" #'evil-buffer-new
     :desc "Switch workspace buffer" :n "b" #'persp-switch-to-buffer
     :desc "Switch buffer"           :n "B" #'switch-to-buffer
     :desc "Kill buffer"             :n "d" #'doom/kill-this-buffer
     :desc "Kill buffer"             :n "k" #'doom/kill-this-buffer
     :desc "Kill other buffers"      :n "o" #'doom/kill-other-buffers
     :desc "Save buffer"             :n "s" #'save-buffer
     :desc "Pop scratch buffer"      :n "x" #'doom/open-scratch-buffer
     :desc "Bury buffer"             :n "z" #'bury-buffer
     :desc "Next buffer"             :n "]" #'doom/next-buffer
     :desc "Previous buffer"         :n "[" #'doom/previous-buffer
     :desc "Sudo edit this file"     :n "S" #'doom/sudo-this-file)

   (:desc "eval" :prefix "e"
     :desc "List errors"               :n  "x" #'flycheck-list-errors
     :desc "Evaluate buffer/region"    :n  "e" #'+eval/buffer
                                       :v  "e" #'+eval/region
     :desc "Evaluate & replace region" :nv "E" #'+eval:replace-region
     :desc "Build tasks"               :nv "b" #'+eval/build
     :desc "Jump to definition"        :n  "d" #'+jump/definition
     :desc "Jump to references"        :n  "D" #'+jump/references
     :desc "Open REPL"                 :n  "r" #'+eval/open-repl
                                       :v  "r" #'+eval:repl)

   (:desc "file" :prefix "f"
     :desc "Find file"                 :n "f" #'find-file
     :desc "Find file"                 :n "." #'find-file
     :desc "Save file"                 :n "s" #'save-buffer
     :desc "Sudo find file"            :n ">" #'doom/sudo-find-file
     :desc "Find file in project"      :n "/" #'projectile-find-file
     :desc "Find file from here"       :n "?" #'counsel-file-jump
     :desc "Find other file"           :n "a" #'projectile-find-other-file
     :desc "Open project editorconfig" :n "c" #'editorconfig-find-current-editorconfig
     :desc "Find file in dotfiles"     :n "d" #'+allforabit/find-in-dotfiles
     :desc "Browse dotfiles"           :n "D" #'+allforabit/browse-dotfiles
     :desc "Find file in emacs.d"      :n "e" #'+allforabit/find-in-emacsd
     :desc "Browse emacs.d"            :n "E" #'+allforabit/browse-emacsd
     :desc "Recent files"              :n "r" #'ivy-recentf
     :desc "Recent project files"      :n "R" #'projectile-recentf
     :desc "Yank filename"             :n "y" #'+allforabit/yank-buffer-filename)

   (:desc "git" :prefix "g"
     :desc "Git status"        :n  "S" #'magit-status
     :desc "Git blame"         :n  "b" #'magit-blame
     :desc "Git time machine"  :n  "t" #'git-timemachine-toggle
     :desc "Git stage hunk"    :n  "s" #'git-gutter:stage-hunk
     :desc "Git revert hunk"   :n  "r" #'git-gutter:revert-hunk
     :desc "Git revert buffer" :n  "R" #'vc-revert
     :desc "List gists"        :n  "g" #'+gist:list
     :desc "Next hunk"         :nv "]" #'git-gutter:next-hunk
     :desc "Previous hunk"     :nv "[" #'git-gutter:previous-hunk)

   (:desc "help" :prefix "h"
     :n "h" help-map
     :desc "Apropos"               :n "a" #'apropos
     :desc "Reload theme"          :n "R" #'doom/reload-theme
     :desc "Find library"          :n "l" #'find-library
     :desc "Toggle Emacs log"      :n "m" #'doom/popup-toggle-messages
     :desc "Command log"           :n "L" #'global-command-log-mode
     :desc "Describe function"     :n "f" #'describe-function
     :desc "Describe key"          :n "k" #'describe-key
     :desc "Describe char"         :n "c" #'describe-char
     :desc "Describe mode"         :n "M" #'describe-mode
     :desc "Describe variable"     :n "v" #'describe-variable
     :desc "Describe face"         :n "F" #'describe-face
     :desc "Describe DOOM setting" :n "s" #'doom/describe-setting
     :desc "Describe DOOM module"  :n "d" #'doom/describe-module
     :desc "Find definition"       :n "." #'+jump/definition
     :desc "Find references"       :n "/" #'+jump/references
     :desc "Find documentation"    :n "h" #'+jump/documentation
     :desc "What face"             :n "'" #'doom/what-face
     :desc "What minor modes"      :n ";" #'doom/what-minor-mode
     :desc "Info"                  :n "i" #'info
     :desc "Toggle profiler"       :n "p" #'doom/toggle-profiler)

   (:desc "insert" :prefix "i"
     :desc "From kill-ring" :nv "y" #'counsel-yank-pop
     :desc "From snippet"   :nv "s" #'yas-insert-snippet)

;; TODO may not be the best use of j prefix
   (:desc "Jumping" :prefix "j"
     :desc "Jump in" :nv "i" #'imenu
     :desc "Jump in" :nv "I" #'imenu-anywhere
     :desc "Jump to" :nv "j" #'evil-avy-goto-char
     :desc "Jump to 2 char" :nv "J" #'evil-avy-goto-char-2)

   ;; Change to spacemacs prefix
   (:desc "workspace" :prefix "l"
     :desc "Display tab bar"          :n "TAB" #'+workspace/display
     :desc "New workspace"            :n "n"   #'+workspace/new
     :desc "Restore workspace from file" :n "r"   #'+workspace/load
     :desc "Restore last session"        :n "R"   (Î»! (+workspace/load-session))
     :desc "Save workspace to file"   :n "s"   #'+workspace/save
     :desc "Autosave current session" :n "S"   #'+workspace/save-session
     :desc "Switch workspace"         :n "l"   #'+workspace/switch-to
     :desc "Kill all buffers"         :n "x"   #'doom/kill-all-buffers
     :desc "Delete session"           :n "X"   #'+workspace/kill-session
     :desc "Delete this workspace"    :n "d"   #'+workspace/delete
     :desc "Load session"             :n "L"   #'+workspace/load-session
     :desc "Next workspace"           :n "]"   #'+workspace/switch-right
     :desc "Previous workspace"       :n "["   #'+workspace/switch-left
     :desc "Switch to 1st workspace"  :n "1"   (Î»! (+workspace/switch-to 0))
     :desc "Switch to 2nd workspace"  :n "2"   (Î»! (+workspace/switch-to 1))
     :desc "Switch to 3rd workspace"  :n "3"   (Î»! (+workspace/switch-to 2))
     :desc "Switch to 4th workspace"  :n "4"   (Î»! (+workspace/switch-to 3))
     :desc "Switch to 5th workspace"  :n "5"   (Î»! (+workspace/switch-to 4))
     :desc "Switch to 6th workspace"  :n "6"   (Î»! (+workspace/switch-to 5))
     :desc "Switch to 7th workspace"  :n "7"   (Î»! (+workspace/switch-to 6))
     :desc "Switch to 8th workspace"  :n "8"   (Î»! (+workspace/switch-to 7))
     :desc "Switch to 9th workspace"  :n "9"   (Î»! (+workspace/switch-to 8))
     :desc "Switch to last workspace" :n "0"   #'+workspace/switch-to-last)


   (:desc "notes" :prefix "n"
     :desc "Find file in notes"    :n "n" #'+allforabit/find-in-notes
     :desc "Browse notes"          :n "N" #'+allforabit/browse-notes
     :desc "Org capture"           :n "x" #'+org-capture/open
     :desc "Browse mode notes"     :n "m" #'+org/browse-notes-for-major-mode
     :desc "Browse project notes"  :n "p" #'+org/browse-notes-for-project)

   (:desc "open" :prefix "o"
     :desc "Default browser"     :n  "b" #'browse-url-of-file
     :desc "Debugger"            :n  "d" #'+debug/open
     :desc "REPL"                :n  "r" #'+eval/open-repl
                                 :v  "r" #'+eval:repl
     :desc "Neotree"             :n  "n" #'+neotree/toggle
     :desc "Terminal"            :n  "t" #'+term/open-popup
     :desc "Terminal in project" :n  "T" #'+term/open-popup-in-project

     ;; applications
     :desc "APP: elfeed"  :n "E" #'=rss
     :desc "APP: email"   :n "M" #'=email
     :desc "APP: twitter" :n "T" #'=twitter
     :desc "APP: regex"   :n "X" #'=regex

     ;; macos
     (:when IS-MAC
       :desc "Reveal in Finder"          :n "o" #'+macos/reveal-in-finder
       :desc "Reveal project in Finder"  :n "O" #'+macos/reveal-project-in-finder
       :desc "Send to Transmit"          :n "u" #'+macos/send-to-transmit
       :desc "Send project to Transmit"  :n "U" #'+macos/send-project-to-transmit
       :desc "Send to Launchbar"         :n "l" #'+macos/send-to-launchbar
       :desc "Send project to Launchbar" :n "L" #'+macos/send-project-to-launchbar))

   (:desc "project" :prefix "p"
     :desc "Browse project"          :n  "." (find-file-in! (doom-project-root))
     :desc "Find file in project"    :n  "/" #'projectile-find-file
     :desc "Find file in project"    :n  "f" #'projectile-find-file
     :desc "Run cmd in project root" :nv "!" #'projectile-run-shell-command-in-root
     :desc "Switch project"          :n  "p" #'projectile-switch-project
     :desc "Recent project files"    :n  "r" #'projectile-recentf
     :desc "List project tasks"      :n  "t" #'+ivy/tasks
     :desc "Pop term in project"     :n  "o" #'+term/open-popup-in-project
     :desc "Invalidate cache"        :n  "x" #'projectile-invalidate-cache)

   (:desc "quit" :prefix "q"
     :desc "Quit"                    :n "q" #'evil-save-and-quit
     :desc "Quit (forget session)"   :n "Q" #'+workspace/kill-session-and-quit)

   (:desc "remote" :prefix "r"
     :desc "Upload local"           :n "u" #'+upload/local
     :desc "Upload local (force)"   :n "U" (Î»! (+upload/local t))
     :desc "Download remote"        :n "d" #'+upload/remote-download
     :desc "Diff local & remote"    :n "D" #'+upload/diff
     :desc "Browse remote files"    :n "." #'+upload/browse
     :desc "Detect remote changes"  :n ">" #'+upload/check-remote)

   ;; (:desc "search" :prefix "s"
   ;;   :desc "Helm swoop"                :nv "s" #'helm-swoop)

   (:desc "search" :prefix "/"
     :desc "Swiper"                :nv "/" #'swiper
     :desc "Imenu"                 :nv "i" #'imenu
     :desc "Imenu across buffers"  :nv "I" #'imenu-anywhere
     :desc "Online providers"      :nv "o" #'+jump/online-select)

   (:desc "snippets" :prefix "s"
     :desc "New snippet"           :n  "n" #'yas-new-snippet
     :desc "Insert snippet"        :nv "i" #'yas-insert-snippet
     :desc "Find snippet for mode" :n  "s" #'yas-visit-snippet-file
     :desc "Find snippet"          :n  "S" #'+allforabit/find-in-snippets)

   (:desc "toggle" :prefix "t"
     :desc "Flyspell"               :n "s" #'flyspell-mode
     :desc "Flycheck"               :n "f" #'flycheck-mode
     :desc "Line numbers"           :n "l" #'doom/toggle-line-numbers
     :desc "Fullscreen"             :n "f" #'doom/toggle-fullscreen
     :desc "Indent guides"          :n "i" #'highlight-indentation-mode
     :desc "Indent guides (column)" :n "I" #'highlight-indentation-current-column-mode
     :desc "Impatient mode"         :n "h" #'+impatient-mode/toggle
     :desc "Big mode"               :n "b" #'doom-big-font-mode
     :desc "Evil goggles"           :n "g" #'+evil-goggles/toggle))


 ;; --- Personal vim-esque bindings ------------------
 :n  "zx" #'doom/kill-this-buffer
 :n  "ZX" #'bury-buffer
 :n  "]b" #'doom/next-buffer
 :n  "[b" #'doom/previous-buffer
 :n  "]w" #'+workspace/switch-right
 :n  "[w" #'+workspace/switch-left
 :m  "gt" #'+workspace/switch-right
 :m  "gT" #'+workspace/switch-left
 :m  "gd" #'+jump/definition
 :m  "gD" #'+jump/references
 :m  "gh" #'+jump/documentation
 :n  "gp" #'+evil/reselect-paste
 :n  "gr" #'+eval:region
 :n  "gR" #'+eval/buffer
 :v  "gR" #'+eval:replace-region
 :v  "@"  #'+evil:macro-on-all-lines
 :n  "g@" #'+evil:macro-on-all-lines
 ;; repeat in visual mode (FIXME buggy)
 :v  "."  #'evil-repeat
 ;; don't leave visual mode after shifting
 :v  "<"  #'+evil/visual-dedent  ; vnoremap < <gv
 :v  ">"  #'+evil/visual-indent  ; vnoremap > >gv
 ;; paste from recent yank register (which isn't overwritten)
 :v  "C-p" "\"0p"

 (:map evil-window-map ; prefix "C-w"
   ;; Navigation
   "C-h"     #'evil-window-left
   "C-j"     #'evil-window-down
   "C-k"     #'evil-window-up
   "C-l"     #'evil-window-right
   "C-w"     #'ace-window
   ;; Swapping windows
   "H"       #'+evil/window-move-left
   "J"       #'+evil/window-move-down
   "K"       #'+evil/window-move-up
   "L"       #'+evil/window-move-right
   "C-S-w"   #'ace-swap-window
   ;; Window undo/redo
   "u"       #'winner-undo
   "C-u"     #'winner-undo
   "C-r"     #'winner-redo
   "o"       #'doom/window-enlargen
   ;; Delete window
   "c"       #'+workspace/close-window-or-workspace
   "C"     #'ace-delete-window)


 ;; --- Plugin bindings ------------------------------
 ;; auto-yasnippet
 :i  [C-tab] #'aya-expand
 :nv [C-tab] #'aya-create

 ;; company-mode (vim-like omnicompletion)
 :i "C-SPC"  #'+company/complete

 (:prefix "C-x"
   :i "C-l"   #'+company/whole-lines
   :i "C-k"   #'+company/dict-or-keywords
   :i "C-f"   #'company-files
   :i "C-]"   #'company-etags
   :i "s"     #'company-ispell
   :i "C-s"   #'company-yasnippet
   :i "C-o"   #'company-capf
   :i "C-n"   #'company-dabbrev-code
   :i "C-p"   #'+company/dabbrev-code-previous)

 (:after company
   (:map company-active-map
     ;; Don't interfere with `evil-delete-backward-word' in insert mode
     "C-w"        nil
     "C-o"        #'company-search-kill-others
     "C-j"        #'company-select-next
     "C-k"        #'company-select-previous
     "C-l"        #'company-complete-selection
     "C-h"        #'company-quickhelp-manual-begin
     "C-S-h"      #'company-show-doc-buffer
     "C-S-s"      #'company-search-candidates
     "C-s"        #'company-filter-candidates
     "C-SPC"      #'company-complete-common
     "C-h"        #'company-quickhelp-manual-begin
     [tab]        #'company-complete-common-or-cycle
     [backtab]    #'company-select-previous
     [escape]     (Î»! (company-abort) (evil-normal-state 1)))
   ;; Automatically applies to `company-filter-map'
   (:map company-search-map
     "C-n"        #'company-search-repeat-forward
     "C-p"        #'company-search-repeat-backward
     "C-s"        (Î»! (company-search-abort) (company-filter-candidates))
     [escape]     #'company-search-abort))

 ;; counsel
 (:after counsel
   (:map counsel-ag-map
     [backtab]  #'+ivy/wgrep-occur  ; search/replace on results
     "C-SPC"    #'counsel-git-grep-recenter   ; preview
     "M-RET"    (+ivy-do-action! #'+ivy-git-grep-other-window-action)))

 ;; evil-commentary
 :n  "gc"  #'evil-commentary

 ;; evil-exchange
 :n  "gx"  #'evil-exchange

 ;; evil-matchit
 :nv [tab] #'+evil/matchit-or-toggle-fold

 ;; evil-magit
 (:after evil-magit
   :map (magit-status-mode-map magit-revision-mode-map)
   :n "C-j" nil
   :n "C-k" nil)

 ;; evil-mc
 (:prefix "gz"
   :nv "m" #'evil-mc-make-all-cursors
   :nv "u" #'evil-mc-undo-all-cursors
   :nv "z" #'+evil/mc-make-cursor-here
   :nv "t" #'+evil/mc-toggle-cursors
   :nv "n" #'evil-mc-make-and-goto-next-cursor
   :nv "p" #'evil-mc-make-and-goto-prev-cursor
   :nv "N" #'evil-mc-make-and-goto-last-cursor
   :nv "P" #'evil-mc-make-and-goto-first-cursor
   :nv "d" #'evil-mc-make-and-goto-next-match
   :nv "D" #'evil-mc-make-and-goto-prev-match)
 (:after evil-mc
   :map evil-mc-key-map
   :nv "C-n" #'evil-mc-make-and-goto-next-cursor
   :nv "C-N" #'evil-mc-make-and-goto-last-cursor
   :nv "C-p" #'evil-mc-make-and-goto-prev-cursor
   :nv "C-P" #'evil-mc-make-and-goto-first-cursor)

 ;; evil-multiedit
 :v  "R"     #'evil-multiedit-match-all
 :n  "M-d"   #'evil-multiedit-match-symbol-and-next
 :n  "M-D"   #'evil-multiedit-match-symbol-and-prev
 :v  "M-d"   #'evil-multiedit-match-and-next
 :v  "M-D"   #'evil-multiedit-match-and-prev
 :nv "C-M-d" #'evil-multiedit-restore
 (:after evil-multiedit
   (:map evil-multiedit-state-map
     "M-d" #'evil-multiedit-match-and-next
     "M-D" #'evil-multiedit-match-and-prev
     "RET" #'evil-multiedit-toggle-or-restrict-region)
   (:map (evil-multiedit-state-map evil-multiedit-insert-state-map)
     "C-n" #'evil-multiedit-next
     "C-p" #'evil-multiedit-prev))

 ;; evil-snipe
 (:after evil-snipe
   ;; Binding to switch to evil-easymotion/avy after a snipe
   :map evil-snipe-parent-transient-map
   "C-;" (Î»! (require 'evil-easymotion)
             (call-interactively
              (evilem-create #'evil-snipe-repeat
                             :bind ((evil-snipe-scope 'whole-buffer)
                                    (evil-snipe-enable-highlight)
                                    (evil-snipe-enable-incremental-highlight))))))

 ;; evil-surround
 :v  "S"  #'evil-surround-region
 :o  "s"  #'evil-surround-edit
 :o  "S"  #'evil-Surround-edit

 ;; expand-region
 :v  "v"  #'er/expand-region
 :v  "V"  #'er/contract-region

 ;; flycheck
 :m  "]e" #'next-error
 :m  "[e" #'previous-error
 (:after flycheck
   :map flycheck-error-list-mode-map
   :n "C-n" #'flycheck-error-list-next-error
   :n "C-p" #'flycheck-error-list-previous-error
   :n "j"   #'flycheck-error-list-next-error
   :n "k"   #'flycheck-error-list-previous-error
   :n "RET" #'flycheck-error-list-goto-error)

 ;; flyspell
 :m  "]S" #'flyspell-correct-word-generic
 :m  "[S" #'flyspell-correct-previous-word-generic

 ;; git-gutter
 :m  "]d" #'git-gutter:next-hunk
 :m  "[d" #'git-gutter:previous-hunk

 ;; git-timemachine
 (:after git-timemachine
   (:map git-timemachine-mode-map
     :nv "p" #'git-timemachine-show-previous-revision
     :nv "n" #'git-timemachine-show-next-revision
     :nv "g" #'git-timemachine-show-nth-revision
     :nv "q" #'git-timemachine-quit
     :nv "w" #'git-timemachine-kill-abbreviated-revision
     :nv "W" #'git-timemachine-kill-revision
     :nv "b" #'git-timemachine-blame))

 ;; gist
 (:after gist
   :map gist-list-menu-mode-map
   :n "RET" #'+gist/open-current
   :n "b"   #'gist-browse-current-url
   :n "c"   #'gist-add-buffer
   :n "d"   #'gist-kill-current
   :n "f"   #'gist-fork
   :n "q"   #'quit-window
   :n "r"   #'gist-list-reload
   :n "s"   #'gist-star
   :n "S"   #'gist-unstar
   :n "y"   #'gist-print-current-url)

 ;; helm
;; helm navigation on hjkl
;; From spacemacs
;; (defun spacemacs//helm-hjkl-navigation (style)
;;   "Set navigation on 'hjkl' for the given editing STYLE."
;;   (cond
;;    ((or (eq 'vim style)
;;         (and (eq 'hybrid style)
;;              hybrid-mode-enable-hjkl-bindings))
;;     (define-key helm-map (kbd "C-j") 'helm-next-line)
;;     (define-key helm-map (kbd "C-k") 'helm-previous-line)
;;     (define-key helm-map (kbd "C-h") 'helm-next-source)
;;     (define-key helm-map (kbd "C-S-h") 'describe-key)
;;     (define-key helm-map (kbd "C-l") (kbd "RET"))
;;     (with-eval-after-load 'helm-files
;;       (dolist (keymap (list helm-find-files-map helm-read-file-map))
;;         (define-key keymap (kbd "C-l") 'helm-execute-persistent-action)
;;         (define-key keymap (kbd "C-h") 'helm-find-files-up-one-level)
;;         ;; rebind `describe-key' for convenience
;;         (define-key keymap (kbd "C-S-h") 'describe-key))))
;;    (t
;;     (define-key helm-map (kbd "C-j") 'helm-execute-persistent-action)
;;     (define-key helm-map (kbd "C-k") 'helm-delete-minibuffer-contents)
;;     (define-key helm-map (kbd "C-h") nil)
;;     (define-key helm-map
;;       (kbd "C-l") 'helm-recenter-top-bottom-other-window))))

 (:after helm
   (:map helm-map
     "ESC"        nil
     "C-j"      #'helm-next-line
     "C-k"      #'helm-previous-line
     "C-h"      #'helm-next-source
     "C-S-h"      #'describe-key
     ;; The same as return in normal helm
     "C-l"      #'helm-maybe-exit-minibuffer
     "C-u"        #'helm-delete-minibuffer-contents
     "C-h"        #'backward-kill-word
     "C-r"        #'evil-paste-from-register ; Evil registers in helm! Glorious!
     "C-b"        #'backward-word
     [left]       #'backward-char
     [right]      #'forward-char
     [escape]     #'helm-keyboard-quit
     [tab]        #'helm-execute-persistent-action)

   (:after helm-files
     (:map helm-generic-files-map
       "C-l"     #'helm-execute-persistent-action
       "C-h"     #'helm-find-files-up-one-level)
     (:map helm-find-files-map
       "C-h" #'helm-find-files-up-one-level
       "C-l" #'helm-execute-persistent-action))

   (:after helm-ag
     (:map helm-ag-map
       "<backtab>"  #'helm-ag-edit)))

 ;; hl-todo
 :m  "]t" #'hl-todo-next
 :m  "[t" #'hl-todo-previous

 ;; ivy
 (:after ivy
   :map ivy-minibuffer-map
   [escape] #'keyboard-escape-quit
   "M-v" #'yank
   "M-z" #'undo
   "C-r" #'evil-paste-from-register
   "C-k" #'ivy-previous-line
   "C-j" #'ivy-next-line
   "C-l" #'ivy-alt-done
   "C-h" #'ivy-backward-delete-char
   "C-w" #'ivy-backward-kill-word
   "C-u" #'ivy-kill-line
   "C-b" #'backward-word
   "C-f" #'forward-word)

 ;; neotree
 (:after neotree
   :map neotree-mode-map
   :n "g"         nil
   :n [tab]       #'neotree-quick-look
   :n "RET"       #'neotree-enter
   :n [backspace] #'evil-window-prev
   :n "c"         #'neotree-create-node
   :n "r"         #'neotree-rename-node
   :n "d"         #'neotree-delete-node
   :n "j"         #'neotree-next-line
   :n "k"         #'neotree-previous-line
   :n "n"         #'neotree-next-line
   :n "p"         #'neotree-previous-line
   :n "h"         #'+neotree/collapse-or-up
   :n "l"         #'+neotree/expand-or-open
   :n "J"         #'neotree-select-next-sibling-node
   :n "K"         #'neotree-select-previous-sibling-node
   :n "H"         #'neotree-select-up-node
   :n "L"         #'neotree-select-down-node
   :n "G"         #'evil-goto-line
   :n "gg"        #'evil-goto-first-line
   :n "v"         #'neotree-enter-vertical-split
   :n "s"         #'neotree-enter-horizontal-split
   :n "q"         #'neotree-hide
   :n "R"         #'neotree-refresh)

 ;; realgud
 (:after realgud
   :map realgud:shortkey-mode-map
   :n "j" #'evil-next-line
   :n "k" #'evil-previous-line
   :n "h" #'evil-backward-char
   :n "l" #'evil-forward-char
   :m "n" #'realgud:cmd-next
   :m "b" #'realgud:cmd-break
   :m "B" #'realgud:cmd-clear
   :n "c" #'realgud:cmd-continue)

 ;; rotate-text
 :n  "!"  #'rotate-text

 ;; smart-forward
 :nv "K"  #'smart-up
 :m  "g]" #'smart-forward
 :m  "g[" #'smart-backward

 ;; undo-tree -- undo/redo for visual regions
 :v "C-u" #'undo-tree-undo
 :v "C-r" #'undo-tree-redo

 ;; yasnippet
 (:after yasnippet
   (:map yas-keymap
     "C-e"           #'+snippets/goto-end-of-field
     "C-a"           #'+snippets/goto-start-of-field
     "<M-right>"     #'+snippets/goto-end-of-field
     "<M-left>"      #'+snippets/goto-start-of-field
     "<M-backspace>" #'+snippets/delete-to-start-of-field
     [escape]        #'evil-normal-state
     [backspace]     #'+snippets/delete-backward-char
     [delete]        #'+snippets/delete-forward-char-or-field)
   (:map yas-minor-mode-map
     :i "<tab>" yas-maybe-expand
     :v "<tab>" #'+snippets/expand-on-region))


 ;; --- Major mode bindings --------------------------
 (:after markdown-mode
   (:map markdown-mode-map
     ;; fix conflicts with private bindings
     "<backspace>" nil
     "<M-left>"    nil
     "<M-right>"   nil))


 ;; --- Custom evil text-objects ---------------------
 :textobj "a" #'evil-inner-arg                    #'evil-outer-arg
 :textobj "B" #'evil-textobj-anyblock-inner-block #'evil-textobj-anyblock-a-block
 :textobj "i" #'evil-indent-plus-i-indent         #'evil-indent-plus-a-indent
 :textobj "I" #'evil-indent-plus-i-indent-up      #'evil-indent-plus-a-indent-up
 :textobj "J" #'evil-indent-plus-i-indent-up-down #'evil-indent-plus-a-indent-up-down


 ;; --- Built-in plugins -----------------------------
 (:after comint
   ;; TAB auto-completion in term buffers
   :map comint-mode-map [tab] #'company-complete)

 (:after debug
   ;; For elisp debugging
   :map debugger-mode-map
   :n "RET" #'debug-help-follow
   :n "e"   #'debugger-eval-expression
   :n "n"   #'debugger-step-through
   :n "c"   #'debugger-continue)

 (:map help-mode-map
   :n "[["  #'help-go-back
   :n "]]"  #'help-go-forward
   :n "o"   #'ace-link-help
   :n "q"   #'quit-window
   :n "Q"   #'+ivy-quit-and-resume)

 (:after vc-annotate
   :map vc-annotate-mode-map
   :n "q"   #'kill-this-buffer
   :n "d"   #'vc-annotate-show-diff-revision-at-line
   :n "D"   #'vc-annotate-show-changeset-diff-revision-at-line
   :n "SPC" #'vc-annotate-show-log-revision-at-line
   :n "]]"  #'vc-annotate-next-revision
   :n "[["  #'vc-annotate-prev-revision
   :n "TAB" #'vc-annotate-toggle-annotation-visibility
   :n "RET" #'vc-annotate-find-revision-at-line))

 ;; (map! (:map markdown-mode-map
 ;;          [remap find-file-at-point] #'markdown-follow-thing-at-point
 ;;          "M-*"      #'markdown-insert-list-item
 ;;          "M-b"      #'markdown-insert-bold
 ;;          "M-i"      #'markdown-insert-italic
 ;;          "M-`"      #'+markdown/insert-del
 ;;          :m "gj"    #'markdown-next-visible-heading
 ;;          :m "gk"    #'markdown-previous-visible-heading
 ;;          ;; Assumes you have a markdown renderer plugin in chrome
 ;;          :n "M-r"   #'browse-url-of-file
 ;;          ;; TODO: Make context sensitive
 ;;          :m "]h"    #'markdown-next-visible-heading
 ;;          :m "[h"    #'markdown-previous-visible-heading
 ;;          :m "[p"    #'markdown-promote
 ;;          :m "]p"    #'markdown-demote
 ;;          :m "[l"    #'markdown-next-link
 ;;          :m "]l"    #'markdown-previous-link
 ;;          :i "M--"   #'markdown-insert-hr

 ;;          (:localleader
 ;;            :nv "o" #'markdown-open
 ;;            :nv "b" #'markdown-preview
 ;;            (:prefix "i"
 ;;              :nv "t" #'markdown-toc-generate-toc
 ;;              :nv "i" #'markdown-insert-image
 ;;              :nv "l" #'markdown-insert-link))))

;; --- Custom key functionality ---------------------
(defmacro do-repeat! (command next-func prev-func)
  "Repeat motions with ;/,"
  (let ((fn-sym (intern (format "+evil*repeat-%s" command))))
    `(progn
       (defun ,fn-sym (&rest _)
         (define-key evil-motion-state-map (kbd ";") ',next-func)
         (define-key evil-motion-state-map (kbd ",") ',prev-func))
       (advice-add #',command :before #',fn-sym))))

;; n/N
(do-repeat! evil-ex-search-next evil-ex-search-next evil-ex-search-previous)
(do-repeat! evil-ex-search-previous evil-ex-search-next evil-ex-search-previous)
(do-repeat! evil-ex-search-forward evil-ex-search-next evil-ex-search-previous)
(do-repeat! evil-ex-search-backward evil-ex-search-next evil-ex-search-previous)

;; f/F/t/T/s/S
(after! evil-snipe
  (setq evil-snipe-repeat-keys nil
        evil-snipe-override-evil-repeat-keys nil) ; causes problems with remapped ;

  (do-repeat! evil-snipe-f evil-snipe-repeat evil-snipe-repeat-reverse)
  (do-repeat! evil-snipe-F evil-snipe-repeat evil-snipe-repeat-reverse)
  (do-repeat! evil-snipe-t evil-snipe-repeat evil-snipe-repeat-reverse)
  (do-repeat! evil-snipe-T evil-snipe-repeat evil-snipe-repeat-reverse)
  (do-repeat! evil-snipe-s evil-snipe-repeat evil-snipe-repeat-reverse)
  (do-repeat! evil-snipe-S evil-snipe-repeat evil-snipe-repeat-reverse)
  (do-repeat! evil-snipe-x evil-snipe-repeat evil-snipe-repeat-reverse)
  (do-repeat! evil-snipe-X evil-snipe-repeat evil-snipe-repeat-reverse))

;; */#
(after! evil-visualstar
  (do-repeat! evil-visualstar/begin-search-forward
    evil-ex-search-next evil-ex-search-previous)
  (do-repeat! evil-visualstar/begin-search-backward
    evil-ex-search-previous evil-ex-search-next))

;; evil-easymotion
(after! evil-easymotion
  (let ((prefix (concat doom-leader-key " /")))
    ;; NOTE `evilem-default-keybinds' unsets all other keys on the prefix (in
    ;; motion state)
    (evilem-default-keybindings prefix)
    (evilem-define (kbd (concat prefix " n")) #'evil-ex-search-next)
    (evilem-define (kbd (concat prefix " N")) #'evil-ex-search-previous)
    (evilem-define (kbd (concat prefix " s")) #'evil-snipe-repeat
                   :pre-hook (save-excursion (call-interactively #'evil-snipe-s))
                   :bind ((evil-snipe-scope 'buffer)
                          (evil-snipe-enable-highlight)
                          (evil-snipe-enable-incremental-highlight)))
    (evilem-define (kbd (concat prefix " S")) #'evil-snipe-repeat-reverse
                   :pre-hook (save-excursion (call-interactively #'evil-snipe-s))
                   :bind ((evil-snipe-scope 'buffer)
                          (evil-snipe-enable-highlight)
                          (evil-snipe-enable-incremental-highlight)))))


;;
;; Keybinding fixes
;;

;; This section is dedicated to "fixing" certain keys so that they behave
;; properly, more like vim, or how I like it.

(map! (:map input-decode-map
        [S-iso-lefttab] [backtab]
        (:unless window-system "TAB" [tab])) ; Fix TAB in terminal

      ;; I want C-a and C-e to be a little smarter. C-a will jump to
      ;; indentation. Pressing it again will send you to the true bol. Same goes
      ;; for C-e, except it will ignore comments and trailing whitespace before
      ;; jumping to eol.
      :i "C-a" #'doom/backward-to-bol-or-indent
      :i "C-e" #'doom/forward-to-last-non-comment-or-eol
      :i "C-u" #'doom/backward-kill-to-bol-and-indent

      ;; textmate-esque newline insertion
      :i [M-return]     #'evil-open-below
      :i [S-M-return]   #'evil-open-above
      ;; textmate-esque deletion
      [M-backspace]     #'doom/backward-kill-to-bol-and-indent
      :i [backspace]    #'delete-backward-char
      :i [M-backspace]  #'doom/backward-kill-to-bol-and-indent
      ;; Emacsien motions for insert mode
      :i "C-b" #'backward-word
      :i "C-f" #'forward-word

      ;; Highjacks space/backspace to:
      ;;   a) balance spaces inside brackets/parentheses ( | ) -> (|)
      ;;   b) delete space-indented blocks intelligently
      ;;   c) do none of this when inside a string
      :i "SPC"                          #'doom/inflate-space-maybe
      :i [remap delete-backward-char]   #'doom/deflate-space-maybe
      :i [remap newline]                #'doom/newline-and-indent

      (:after org-mode
        (:map org-mode-map
          :i [remap doom/inflate-space-maybe] #'org-self-insert-command
          :i "C-e" #'org-end-of-line
          :i "C-a" #'org-beginning-of-line))

      ;; Restore common editing keys (and ESC) in minibuffer
      (:map (minibuffer-local-map
             minibuffer-local-ns-map
             minibuffer-local-completion-map
             minibuffer-local-must-match-map
             minibuffer-local-isearch-map
             evil-ex-completion-map
             evil-ex-search-keymap
             read-expression-map)
        [escape] #'abort-recursive-edit
        "C-r" #'evil-paste-from-register
        "C-a" #'move-beginning-of-line
        "C-w" #'doom/minibuffer-kill-word
        "C-u" #'doom/minibuffer-kill-line
        "C-b" #'backward-word
        "C-f" #'forward-word
        "M-z" #'doom/minibuffer-undo)

      (:map messages-buffer-mode-map
        "M-;" #'eval-expression
        "A-;" #'eval-expression)

      (:map tabulated-list-mode-map
        [remap evil-record-macro] #'doom/popup-close-maybe)

      (:after view
        (:map view-mode-map "<escape>" #'View-quit-all)))
        #+END_SRC

        #+RESULTS:
        : View-quit-all

* Commands
#+BEGIN_SRC emacs-lisp :tangle "~/Github/doom-emacs/modules/private/allforabit/+commands.el" :mkdirp yes
;;; private/allforabit/+commands.el -*- lexical-binding: t; -*-

(defalias 'ex! 'evil-ex-define-cmd)

;;; Commands defined elsewhere
;;(ex! "al[ign]"      #'+evil:align)
;;(ex! "g[lobal]"     #'+evil:global)

;;; Custom commands
;; Editing
(ex! "@"            #'+evil:macro-on-all-lines)   ; TODO Test me
(ex! "al[ign]"      #'+evil:align)
(ex! "enhtml"       #'+web:encode-html-entities)
(ex! "dehtml"       #'+web:decode-html-entities)
(ex! "mc"           #'+evil:mc)
(ex! "iedit"        #'evil-multiedit-ex-match)
(ex! "na[rrow]"     #'+evil:narrow-buffer)
(ex! "retab"        #'+evil:retab)

;; External resources
;; TODO (ex! "db"          #'doom:db)
;; TODO (ex! "dbu[se]"     #'doom:db-select)
;; TODO (ex! "go[ogle]"    #'doom:google-search)
(ex! "lo[okup]"    #'+jump:online)
(ex! "http"        #'httpd-start)            ; start http server
(ex! "repl"        #'+eval:repl)             ; invoke or send to repl
;; TODO (ex! "rx"          'doom:regex)             ; open re-builder
(ex! "sh[ell]"     #'+eshell:run)
(ex! "t[mux]"      #'+tmux:run)              ; send to tmux
(ex! "tcd"         #'+tmux:cd-here)          ; cd to default-directory in tmux
(ex! "x"           #'doom/open-project-scratch-buffer)

;; GIT
(ex! "gist"        #'+gist:send)  ; send current buffer/region to gist
(ex! "gistl"       #'+gist:list)  ; list gists by user
(ex! "gbrowse"     #'+vcs/git-browse)        ; show file in github/gitlab
(ex! "gissues"     #'+vcs/git-browse-issues) ; show github issues
(ex! "git"         #'magit-status)           ; open magit status window
(ex! "gstage"      #'magit-stage)
(ex! "gunstage"    #'magit-unstage)
(ex! "gblame"      #'magit-blame)
(ex! "grevert"     #'git-gutter:revert-hunk)

;; Dealing with buffers
(ex! "clean[up]"   #'doom/cleanup-buffers)
(ex! "k[ill]"      #'doom/kill-this-buffer)
(ex! "k[ill]all"   #'+allforabit:kill-all-buffers)
(ex! "k[ill]m"     #'+allforabit:kill-matching-buffers)
(ex! "k[ill]o"     #'doom/kill-other-buffers)
(ex! "l[ast]"      #'doom/popup-restore)
(ex! "m[sg]"       #'view-echo-area-messages)
(ex! "pop[up]"     #'doom/popup-this-buffer)

;; Project navigation
(ex! "a"           #'projectile-find-other-file)
(ex! "cd"          #'+allforabit:cd)
(cond ((featurep! :completion ivy)
       (ex! "ag"       #'+ivy:ag)
       (ex! "agc[wd]"  #'+ivy:ag-cwd)
       (ex! "rg"       #'+ivy:rg)
       (ex! "rgc[wd]"  #'+ivy:rg-cwd)
       (ex! "sw[iper]" #'+ivy:swiper)
       (ex! "todo"     #'+ivy:todo))
      ((featurep! :completion helm)
       (ex! "ag"       #'+helm:ag)
       (ex! "agc[wd]"  #'+helm:ag-cwd)
       (ex! "rg"       #'+helm:rg)
       (ex! "rgc[wd]"  #'+helm:rg-cwd)
       (ex! "sw[oop]"  #'+helm:swoop)
       (ex! "todo"     #'+helm:todo)))

;; Project tools
(ex! "build"       #'+eval/build)
(ex! "debug"       #'+debug/run)
(ex! "er[rors]"    #'flycheck-list-errors)

;; File operations
(ex! "cp"          #'+evil:copy-this-file)
(ex! "mv"          #'+evil:move-this-file)
(ex! "rm"          #'+evil:delete-this-file)

;; Sessions/tabs
(ex! "sclear"      #'+workspace/kill-session)
(ex! "sl[oad]"     #'+workspace:load-session)
(ex! "ss[ave]"     #'+workspace:save-session)
(ex! "tabc[lose]"  #'+workspace:delete)
(ex! "tabclear"    #'doom/kill-all-buffers)
(ex! "tabl[ast]"   #'+workspace/switch-to-last)
(ex! "tabload"     #'+workspace:load)
(ex! "tabn[ew]"    #'+workspace:new)
(ex! "tabn[ext]"   #'+workspace:switch-next)
(ex! "tabp[rev]"   #'+workspace:switch-previous)
(ex! "tabr[ename]" #'+workspace:rename)
(ex! "tabs"        #'+workspace/display)
(ex! "tabsave"     #'+workspace:save)

;; Org-mode
(ex! "cap"         #'+org-capture/dwim)
#+END_SRC
* [ ] Autoload

#+BEGIN_SRC php
echo 'Hello, World!\n';
#+END_SRC

#+RESULTS:
#+begin_example
Usage: php [options] [-f] <file> [--] [args...]
   php [options] -r <code> [--] [args...]
   php [options] [-B <begin_code>] -R <code> [-E <end_code>] [--] [args...]
   php [options] [-B <begin_code>] -F <file> [-E <end_code>] [--] [args...]
   php [options] -S <addr>:<port> [-t docroot] [router]
   php [options] -- [args...]
   php [options] -a

  -a               Run as interactive shell
  -c <path>|<file> Look for php.ini file in this directory
  -n               No configuration (ini) files will be used
  -d foo[=bar]     Define INI entry foo with value 'bar'
  -e               Generate extended information for debugger/profiler
  -f <file>        Parse and execute <file>.
  -h               This help
  -i               PHP information
  -l               Syntax check only (lint)
  -m               Show compiled in modules
  -r <code>        Run PHP <code> without using script tags <?..?>
  -B <begin_code>  Run PHP <begin_code> before processing input lines
  -R <code>        Run PHP <code> for every input line
  -F <file>        Parse and execute <file> for every input line
  -E <end_code>    Run PHP <end_code> after processing all input lines
  -H               Hide any passed arguments from external tools.
  -S <addr>:<port> Run with built-in web server.
  -t <docroot>     Specify document root <docroot> for built-in web server.
  -s               Output HTML syntax highlighted source.
  -v               Version number
  -w               Output source with stripped comments and whitespace.
  -z <file>        Load Zend extension <file>.

  args...          Arguments passed to script. Use -- args when first argument
                   starts with - or script is read from stdin

  --ini            Show configuration file names

  --rf <name>      Show information about function <name>.
  --rc <name>      Show information about class <name>.
  --re <name>      Show information about extension <name>.
  --rz <name>      Show information about Zend extension <name>.
  --ri <name>      Show configuration for extension <name>.

#+end_example

#+BEGIN_SRC js
return 1 + 1;
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC emacs-lisp :tangle  "~/Github/doom-emacs/modules/private/allforabit/autoload/allforabit.el" :mkdirp yes
;;; private/allforabit/autoload/allforabit.el -*- lexical-binding: t; -*-
;;;###autoload

(defun +allforabit/install-snippets ()
  "Install my snippets from https://github.com/allforabit/emacs-snippets into
private/allforabit/snippets."
  (interactive)
  (doom-fetch :github "hlissner/emacs-snippets"
              (expand-file-name "snippets" (doom-module-path :private 'allforabit))))

;;;###autoload
(defun +allforabit/yank-buffer-filename ()
  "Copy the current buffer's path to the kill ring."
  (interactive)
  (if-let (filename (or buffer-file-name (bound-and-true-p list-buffers-directory)))
      (message (kill-new (abbreviate-file-name filename)))
    (error "Couldn't find filename in current buffer")))

(defmacro +allforabit-def-finder! (name dir)
  "Define a pair of find-file and browse functions."
  `(progn
     (defun ,(intern (format "+allforabit/find-in-%s" name)) ()
       (interactive)
       (let ((default-directory ,dir)
             projectile-require-project-root
             projectile-cached-buffer-file-name
             projectile-cached-project-root)
         (call-interactively (command-remapping #'projectile-find-file))))
     (defun ,(intern (format "+allforabit/browse-%s" name)) ()
       (interactive)
       (let ((default-directory ,dir))
         (call-interactively (command-remapping #'find-file))))))

;;;###autoload (autoload '+allforabit/find-in-templates "private/allforabit/autoload/allforabit" nil t)
;;;###autoload (autoload '+allforabit/browse-templates "private/allforabit/autoload/allforabit" nil t)
(+allforabit-def-finder! templates +file-templates-dir)

;;;###autoload (autoload '+allforabit/find-in-snippets "private/allforabit/autoload/allforabit" nil t)
;;;###autoload (autoload '+allforabit/browse-snippets "private/allforabit/autoload/allforabit" nil t)
(+allforabit-def-finder! snippets +allforabit-snippets-dir)

;;;###autoload (autoload '+allforabit/find-in-dotfiles "private/allforabit/autoload/allforabit" nil t)
;;;###autoload (autoload '+allforabit/browse-dotfiles "private/allforabit/autoload/allforabit" nil t)
(+allforabit-def-finder! dotfiles (expand-file-name ".dotfiles" "~"))

;;;###autoload (autoload '+allforabit/find-in-emacsd "private/allforabit/autoload/allforabit" nil t)
;;;###autoload (autoload '+allforabit/browse-emacsd "private/allforabit/autoload/allforabit" nil t)
(+allforabit-def-finder! emacsd doom-emacs-dir)

;;;###autoload (autoload '+allforabit/find-in-notes "private/allforabit/autoload/allforabit" nil t)
;;;###autoload (autoload '+allforabit/browse-notes "private/allforabit/autoload/allforabit" nil t)
(+allforabit-def-finder! notes +org-dir)
#+END_SRC

** Evil
#+BEGIN_SRC emacs-lisp :tangle  "~/Github/doom-emacs/modules/private/allforabit/autoload/evil.el" :mkdirp yes
;;; private/allforabit/autoload/evil.el -*- lexical-binding: t; -*-
;;;###if (featurep! :feature evil)

;;;###autoload (autoload '+allforabit:multi-next-line "private/allforabit/autoload/evil" nil t)
(evil-define-motion +allforabit:multi-next-line (count)
  "Move down 6 lines."
  :type line
  (let ((line-move-visual (or visual-line-mode (derived-mode-p 'text-mode))))
    (evil-line-move (* 6 (or count 1)))))

;;;###autoload (autoload '+allforabit:multi-previous-line "private/allforabit/autoload/evil" nil t)
(evil-define-motion +allforabit:multi-previous-line (count)
  "Move up 6 lines."
  :type line
  (let ((line-move-visual (or visual-line-mode (derived-mode-p 'text-mode))))
    (evil-line-move (- (* 6 (or count 1))))))

;;;###autoload (autoload '+allforabit:cd "private/allforabit/autoload/evil" nil t)
(evil-define-command +allforabit:cd ()
  "Change `default-directory' with `cd'."
  (interactive "<f>")
  (cd input))

;;;###autoload (autoload '+allforabit:kill-all-buffers "private/allforabit/autoload/evil" nil t)
(evil-define-command +allforabit:kill-all-buffers (&optional bang)
  "Kill all buffers. If BANG, kill current session too."
  (interactive "<!>")
  (if bang
      (+workspace/kill-session)
    (doom/kill-all-buffers)))

;;;###autoload (autoload '+allforabit:kill-matching-buffers "private/allforabit/autoload/evil" nil t)
(evil-define-command +allforabit:kill-matching-buffers (&optional bang pattern)
  "Kill all buffers matching PATTERN regexp. If BANG, only match project
buffers."
  (interactive "<a>")
  (doom/kill-matching-buffers pattern bang))
#+END_SRC
* A thing
Not sure what this is
#+BEGIN_SRC emacs-lisp :tangle "~/Github/doom-emacs/modules/private/allforabit/a-thing.el" :mkdirp yes
(map!
 ;; --- Global keybindings ---------------------------
 :nvime "M-h" (Î»! (message "hello")))
#+END_SRC
* Git ignore
#+BEGIN_SRC txt :tangle "~/Github/doom-emacs/modules/private/allforabit/.gitignore" :mkdirp yes
snippets
.authinfo.gpg
#+END_SRC
