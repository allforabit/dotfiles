{
  "name": "allforabit/dotfiles",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "Dotfiles",
  "branch": "",
  "style": {
    "name": "Humanist",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/LightBannerHeader",
      "article": "article/ReaderArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Athelas, Georgia, serif",
    "heading": {
      "fontWeight": 400,
      "textTransform": "uppercase",
      "letterSpacing": "0.1em"
    },
    "colors": {
      "text": "#121212",
      "background": "#fff",
      "primary": "#ee5544",
      "secondary": "#005499",
      "highlight": "#00bd78",
      "border": "#ddd",
      "muted": "#f3f3f3"
    },
    "layout": {
      "maxWidth": 768
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/allforabit/dotfiles",
          "text": "GitHub"
        }
      ]
    },
    {
      "component": "header",
      "heading": "dotfiles",
      "subhead": null,
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "dotfiles: ",
          "url": null
        },
        {
          "component": "ui/GithubButton",
          "user": "allforabit",
          "repo": "dotfiles"
        }
      ]
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<p>;; -<em>- after-save-hook: org-babel-tangle; -</em>-</p>\n<ul>\n<li>Introduction [0/1]\n:todo:<ul>\n<li>[ ] Fix doom link\n:END:\nCross platform config that uses org mode to keep track of all apps to be\ninstalled as well as the configuration for these apps. Setting up on a new\ncomputer should be a matter of running a single installation command to:</li>\n<li>Download all apps and dependencies</li>\n<li>Tangle code from this file</li>\n<li>Do any symlinking that is required\nN.B. Symlinking may not be required and org tangle may the only thing that is\nneeded!!!</li>\n</ul>\n</li>\n</ul>\n<p>Makefile ala [[<a href=\"http://github.com/doom/doom][Doom\">http://github.com/doom/doom][Doom</a>]] may be used to run the scripts.</p>\n<p>This is the beginning of a very long sentence that shall scarcely ever be\ncompleted this another bit of the line and when it does it should wrap around to\nthe next line. And then we go on and on, bla bla bla!!!!</p>\n<ul>\n<li>Gui apps                                                          :gui:app:\nThese are gui apps and aren&apos;t used in the commandline\n<strong> Cross platform                                         :windows:osx:linux:\n*</strong> Chromium                                                       :chromium:\n  :PROPERTIES:\n  :DOWNLOAD_URL: <a href=\"http://commondatastorage.googleapis.com/chromium-browser-snapshots/Win_x64/478480/chrome-win32.zip\">http://commondatastorage.googleapis.com/chromium-browser-snapshots/Win_x64/478480/chrome-win32.zip</a>\n  :OS:       windows\n  :END:</li>\n</ul>\n<p><em>**</em> Dirac\n     :PROPERTIES:\n     :DOWNLOAD_URL: <a href=\"https://github.com/binaryage/dirac/releases/download/v1.2.10/dirac-1.2.10.zip\">https://github.com/binaryage/dirac/releases/download/v1.2.10/dirac-1.2.10.zip</a>\n     :OS:       windows\n     :END:</p>\n<p><strong> Windows                                                          :windows:\n*</strong> Rapid environment editor\n<strong>* Autoit\n</strong> Non Free OS                                                  :osx:windows:\n<strong><em> Audio                                                             :audio:\n*</em></strong> Ableton Live\n<em>**</em> Adobe Audition</p>\n<ul>\n<li>Commandline apps\nCan be used on the commandline but may also be used in a GUI\n<strong> Cross platform                                         :windows:osx:linux:\n*</strong> Distributions                                     :distributions:dotfile:\n<strong><em>* Thoughtbot\n</em></strong> Text editor                                                 :text_editor:\n<strong><strong> Emacs                                                            :emacs:\n   :PROPERTIES:\n   :DOWNLOAD_URL: <a href=\"http://ftp.heanet.ie/mirrors/gnu/emacs/windows/emacs-25.2-x86_64.zip\">http://ftp.heanet.ie/mirrors/gnu/emacs/windows/emacs-25.2-x86_64.zip</a>\n   :OS:       windows\n   :END:\n*</strong></strong> Distributions                                      :distribution:\n<strong>**</strong> Spacemacs :spacemacs:\n<strong>**</strong> Doom :doom_emacs:\n<strong><em>*</em></strong> Doom init\n#+BEGIN<em>SRC emacs-lisp :tangle &quot;~/Github/doom-emacs/init.el&quot; :mkdirp yes\n;;; init.el -<em>- lexical-binding: t; -</em>-\n;;\n;; Author:  Henrik Lissner <a href=\"mailto:henrik@lissner.net\">henrik@lissner.net</a>\n;; URL:     <a href=\"https://github.com/hlissner/.emacs.d\">https://github.com/hlissner/.emacs.d</a>\n;;\n;;   =================     ===============     ===============   ========  ========\n;;   \\ . . . . . . .\\   //. . . . . . .\\   //. . . . . . .\\  \\. . .\\// . . //\n;;   ||. . .<em>__</em></em>. . .|| ||. . .<strong>_</strong>. . .|| ||. . .<strong>_</strong>. . .|| || . . .\\/ . . .||\n;;   || . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||\n;;   ||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||\n;;   || . .||   ||. <em>-|| ||-</em> .||   ||. . || || . .||   ||. <em>-|| ||-</em>.|\\ . . . . ||\n;;   ||. . ||   ||-&apos;  || ||  <code>-||   || . .|| ||. . ||   ||-&apos;  || ||</code>|_ . .|. .||\n;;   || . <em>||   ||    || ||    ||   ||</em> . || || . <em>||   ||    || ||   |\\ `-</em>/| . ||\n;;   ||<em>-&apos; ||  .|/    || ||    |.  || `-</em>|| ||<em>-&apos; ||  .|/    || ||   | \\  / |-</em>.||\n;;   ||    ||<em>-&apos;      || ||      `-</em>||    || ||    ||<em>-&apos;      || ||   | \\  / |  <code>||\n;;   ||</code>&apos;         || ||         <code>&apos;    || ||</code>&apos;         || ||   | \\  / |   ||\n;;   ||            .===&apos; <code>===.         .===&apos;.</code>===.         .===&apos; /==. |  \\/  |   ||\n;;   ||         .==&apos;   \\</em>|-<em> `===. .===&apos;   </em>|<em>   `===. .===&apos; </em>-|/   <code>==  \\/  |   ||\n;;   ||      .==&apos;    _-&apos;</code>-<em>  `=&apos;    </em>-&apos;   <code>-_</code>=&apos;  <em>-&apos;   `-</em>  /|  \\/  |   ||\n;;   ||   .==&apos;    <em>-&apos;          &apos;-__.</em>-&apos;         &apos;-<em>./__-&apos;         `&apos; |. /|  |   ||\n;;   ||.==&apos;    </em>-&apos;                                                     <code>&apos; |  /==.||\n;;   ==&apos;    _-&apos;                                                            \\/</code>==\n;;   \\   <em>-&apos;                                                                `-</em>   /\n;;    `&apos;&apos;                                                                      ``&apos;\n;;\n;; These demons are not part of GNU Emacs.\n;;\n;;; License: MIT</li>\n</ul>\n<p>(require &apos;core (concat user-emacs-directory &quot;core/core&quot;))</p>\n<p>(setq user-login-name &quot;allforabit&quot;)</p>\n<p>;; Setup path (windows only for now)\n(when (string-equal system-type &quot;windows-nt&quot;)\n  (setenv &quot;PATH&quot;\n    (concat\n    &quot;C:/msys64/mingw64/bin&quot; &quot;;&quot;\n    &quot;C:/msys64/usr/bin&quot; &quot;;&quot;\n    (getenv &quot;PATH&quot;))))</p>\n<p>(doom! :feature\n       evil            ; come to the dark side, we have cookies\n       jump            ; helping you get around\n       snippets        ; my elves. They type so I don&apos;t have to\n       file-templates  ; auto-snippets for empty files\n       hydra           ; keybindings that stick around\n       spellcheck      ; tasing you for misspelling mispelling\n       syntax-checker  ; tasing you for every semicolon you forget\n       version-control ; remember, remember that commit in November\n       workspaces      ; tab emulation, persistence &amp; separate workspaces\n       eval            ; repls, runners &apos;n builders; run code, run\n      ;debug           ; FIXME stepping through code, to help you add bugs</p>\n<pre>   :completion\n   company         <span class=\"hljs-comment\">; the ultimate code completion backend</span>\n   <span class=\"hljs-comment\">;ivy             ; a search engine for love and life</span>\n  helm            <span class=\"hljs-comment\">; the *other* search engine for love and life</span>\n  <span class=\"hljs-comment\">;ido             ; the other *other* search engine...</span>\n\n   :ui\n   doom            <span class=\"hljs-comment\">; what makes DOOM look the way it does</span>\n   doom-dashboard  <span class=\"hljs-comment\">; a nifty splash screen for Emacs</span>\n   doom-modeline   <span class=\"hljs-comment\">; a snazzy Atom-inspired mode-line</span>\n   doom-quit       <span class=\"hljs-comment\">; DOOM quit-message prompts when you quit Emacs</span>\n   hl-todo         <span class=\"hljs-comment\">; highlight TODO/FIXME/NOTE tags</span>\n   nav-flash       <span class=\"hljs-comment\">; blink the current line after jumping</span>\n   evil-goggles    <span class=\"hljs-comment\">; display visual hints when editing in evil</span>\n  <span class=\"hljs-comment\">;unicode         ; extended unicode support for various languages</span>\n  <span class=\"hljs-comment\">;tabbar          ; FIXME an (incomplete) tab bar for Emacs</span>\n\n   :tools\n   <span class=\"hljs-keyword\">dired </span>          <span class=\"hljs-comment\">; making dired pretty [functional]</span>\n   electric-indent <span class=\"hljs-comment\">; smarter, keyword-based electric-indent</span>\n   eshell          <span class=\"hljs-comment\">; a consistent, cross-platform shell (WIP)</span>\n   gist            <span class=\"hljs-comment\">; interacting with github gists</span>\n   impatient-mode  <span class=\"hljs-comment\">; show off code over HTTP</span>\n  <span class=\"hljs-comment\">;macos           ; MacOS-specific commands</span>\n   neotree         <span class=\"hljs-comment\">; a project drawer, like NERDTree for vim</span>\n   password-store  <span class=\"hljs-comment\">; password manager for nerds</span>\n   prodigy         <span class=\"hljs-comment\">; manage external services from within emacs</span>\n   rotate-text     <span class=\"hljs-comment\">; cycle region at point between text candidates</span>\n   term            <span class=\"hljs-comment\">; terminals in Emacs</span>\n   tmux            <span class=\"hljs-comment\">; an API for interacting with tmux</span>\n   upload          <span class=\"hljs-comment\">; map local to remote projects via ssh/ftp</span>\n\n   :lang\n  <span class=\"hljs-comment\">;assembly        ; assembly for fun or debugging</span>\n  <span class=\"hljs-comment\">;cc              ; C/C++/Obj-C madness</span>\n  <span class=\"hljs-comment\">;crystal         ; ruby at the speed of c</span>\n  <span class=\"hljs-comment\">;csharp          ; unity, .NET, and mono shenanigans</span>\n  <span class=\"hljs-comment\">;data            ; config/data formats</span>\n  <span class=\"hljs-comment\">;elixir          ; erlang done right</span>\n  <span class=\"hljs-comment\">;elm             ; care for a cup of TEA?</span>\n   emacs-lisp      <span class=\"hljs-comment\">; drown in parentheses</span>\n  <span class=\"hljs-comment\">;go              ; the hipster dialect</span>\n  <span class=\"hljs-comment\">;haskell         ; a language that&apos;s lazier than I am</span>\n  <span class=\"hljs-comment\">;hy              ; readability of scheme w/ speed of python</span>\n  <span class=\"hljs-comment\">;java            ; the poster child for carpal tunnel syndrome</span>\n  <span class=\"hljs-comment\">;javascript      ; all(hope(abandon(ye(who(enter(here))))))</span>\n  <span class=\"hljs-comment\">;julia           ; a better, faster MATLAB</span>\n  <span class=\"hljs-comment\">;latex           ; writing papers in Emacs has never been so fun</span>\n  <span class=\"hljs-comment\">;ledger          ; an accounting system in Emacs</span>\n  <span class=\"hljs-comment\">;lua             ; one-based indices? one-based indices</span>\n  <span class=\"hljs-comment\">;markdown        ; writing docs for people to ignore</span>\n  <span class=\"hljs-comment\">;ocaml           ; an objective camel</span>\n  <span class=\"hljs-comment\">;perl            ; write code no one else can comprehend</span>\n  php             <span class=\"hljs-comment\">; make php less awful to work with</span>\n  <span class=\"hljs-comment\">;plantuml        ; diagrams for confusing people more</span>\n  <span class=\"hljs-comment\">;purescript      ; javascript, but functional</span>\n  <span class=\"hljs-comment\">;python          ; beautiful is better than ugly</span>\n  <span class=\"hljs-comment\">;rest            ; Emacs as a REST client</span>\n  <span class=\"hljs-comment\">;ruby            ; 1.step do {|i| p &quot;Ruby is #{i.even? ? &apos;love&apos; : &apos;life&apos;}&quot;}</span>\n  <span class=\"hljs-comment\">;rust            ; Fe2O3.unwrap().unwrap().unwrap().unwrap()</span>\n  <span class=\"hljs-comment\">;scala           ; java, but good</span>\n  <span class=\"hljs-comment\">;sh              ; she sells (ba|z)sh shells on the C xor</span>\n  <span class=\"hljs-comment\">;swift           ; who asked for emoji variables?</span>\n  <span class=\"hljs-comment\">;typescript      ; javascript, but better</span>\n  <span class=\"hljs-comment\">;web             ; the tubes</span>\n\n   :<span class=\"hljs-keyword\">org\n</span>   <span class=\"hljs-keyword\">org </span>            <span class=\"hljs-comment\">; organize your plain life in plain text</span>\n   <span class=\"hljs-keyword\">org-babel </span>      <span class=\"hljs-comment\">; executable code snippets in org-mode</span>\n   <span class=\"hljs-keyword\">org-attach </span>     <span class=\"hljs-comment\">; a simpler attachment system</span>\n   <span class=\"hljs-keyword\">org-capture </span>    <span class=\"hljs-comment\">; a better org-capture, in or outside of Emacs</span>\n   <span class=\"hljs-keyword\">org-export </span>     <span class=\"hljs-comment\">; a custom, centralized export system</span>\n   <span class=\"hljs-keyword\">org-notebook </span>   <span class=\"hljs-comment\">; org-mode as a notebook</span>\n   <span class=\"hljs-keyword\">org-present </span>    <span class=\"hljs-comment\">; using org-mode for presentations</span>\n  <span class=\"hljs-comment\">;org-sync        ; TODO sync with mobile</span>\n  <span class=\"hljs-comment\">;org-publish     ; TODO org + blogs</span>\n\n   <span class=\"hljs-comment\">;; Applications are complex and opinionated modules that transform Emacs</span>\n   <span class=\"hljs-comment\">;; toward a specific purpose. They may have additional dependencies and</span>\n   <span class=\"hljs-comment\">;; should be loaded last.</span>\n   :app\n   email           <span class=\"hljs-comment\">; emacs as an email client</span>\n   irc             <span class=\"hljs-comment\">; how neckbeards socialize</span>\n   rss             <span class=\"hljs-comment\">; emacs as an RSS reader</span>\n   twitter         <span class=\"hljs-comment\">; twitter client https://twitter.com/vnought</span>\n   write           <span class=\"hljs-comment\">; emacs as a word processor (latex + org + markdown)</span>\n\n   <span class=\"hljs-comment\">;; Private modules named after your username are loaded automatically.</span>\n   <span class=\"hljs-comment\">;; Leaving this here is harmless though. Also, they are omitted from</span>\n   <span class=\"hljs-comment\">;; source control (except for mine; use it as a reference).</span>\n   <span class=\"hljs-comment\">;; original value: hlissner</span>\n   :private allforabit)\n\n    <span class=\"hljs-comment\">#+END_SRC</span>\n\n    <span class=\"hljs-comment\">#+RESULTS:</span>\n    : Doom modules initialized</pre><p><strong><em>*</em></strong> Private init</p>\n<p>#+BEGIN_SRC emacs-lisp :tangle &quot;~/Github/doom-emacs/modules/private/allforabit/init.el&quot; :mkdirp yes\n;;; private/hlissner/init.el -<em>- lexical-binding: t; -</em>-</p>\n<p>;; I&apos;ve swapped these keys on my keyboard\n(setq x-super-keysym &apos;alt\n      x-alt-keysym   &apos;meta</p>\n<pre>  <span class=\"hljs-keyword\">user</span>-mail-address <span class=\"hljs-string\">&quot;henrik@lissner.net&quot;</span>\n  <span class=\"hljs-keyword\">user</span>-full-name    <span class=\"hljs-string\">&quot;Henrik Lissner&quot;</span>)</pre><p>;; Org stuff\n(setq +org-dir &quot;~/Bitbucket/org/&quot;)\n(setq-default org-ellipsis &quot;&#x2026;&quot;)</p>\n<p>(setq org-default-notes-file (concat +org-dir &quot;notes.org&quot;)\n      org-capture-templates\n      &apos;((&quot;t&quot; &quot;Todo&quot; entry\n         (file+headline (expand-file-name &quot;gtd.org&quot; +org-dir) &quot;Inbox&quot;)\n         &quot;<em> [ ] %?\\n%i&quot; :prepend t :kill-buffer t)\n        (&quot;c&quot; &quot;Code journal&quot; entry (file+olp+datetree &quot;~/Bitbucket/org/code.org&quot; &quot;Journal&quot;)\n         &quot;</em> %?\\nEntered on %U\\n  %i\\n  %a&quot;\n         :jump-to-captured t)\n        (&quot;n&quot; &quot;Notes&quot; entry\n         (file+headline org-default-notes-file &quot;Inbox&quot;)\n         &quot;* %u %?\\n%i&quot; :prepend t :kill-buffer t)))</p>\n<p>;; An extra measure to prevent the flash of unstyled mode-line while Emacs is\n;; booting up (when Doom is byte-compiled).\n(setq-default mode-line-format nil)</p>\n<p>(set! :font &quot;Source Code Pro&quot; :size 13)\n(set! :variable-font &quot;Georgia&quot; :size 13)\n(set! :unicode-font &quot;Symbola&quot; :size 13)</p>\n<p>#+END_SRC</p>\n<p>#+RESULTS:\n<strong><em>*</em></strong> Packages</p>\n<pre>    #+<span class=\"hljs-keyword\">BEGIN_SRC </span>emacs-lisp :tangle  <span class=\"hljs-string\">&quot;~/Github/doom-emacs/modules/private/allforabit/packages.el&quot;</span> :mkdirp yes</pre><p>(package! drupal-mode)</p>\n<pre>    <span class=\"hljs-comment\">#+END_SRC</span>\n\n    <span class=\"hljs-comment\">#+RESULTS:</span>\n    |<span class=\"hljs-string\"> drupal-mode </span>|</pre><p><strong><em>*</em></strong> Config\nThis is loaded last.</p>\n<p>#+NAME: doom-drupal</p>\n<p>#+BEGIN_SRC emacs-lisp </p>\n<p>#+END_SRC</p>\n<p>#+BEGIN_SRC emacs-lisp :tangle &quot;~/Github/doom-emacs/modules/private/allforabit/config.el&quot; :mkdirp yes\n;;; private/allforabit/config.el -<em>- lexical-binding: t; -</em>-</p>\n<p>;; Make it possible to add hashes and euro symbols\n(setq mac-right-option-modifier nil)\n;; from modules/completion/company/config.el\n;; Drupal mode</p>\n<p>(def-package! drupal-mode)</p>\n<p>(when (featurep! :feature evil)\n  (load! +bindings)  ; my key bindings\n  (load! +commands)) ; my custom ex commands</p>\n<p>(defvar +hlissner-dir (file-name-directory load-file-name))\n(defvar +hlissner-snippets-dir (expand-file-name &quot;snippets/&quot; +hlissner-dir))</p>\n<p>(setq epa-file-encrypt-to user-mail-address\n      auth-sources (list (expand-file-name &quot;.authinfo.gpg&quot; +hlissner-dir))\n      +doom-modeline-buffer-file-name-style &apos;relative-from-project)</p>\n<p>(defun +hlissner<em>no-authinfo-for-tramp (orig-fn &amp;rest args)\n  &quot;Don&apos;t look into .authinfo for local sudo TRAMP buffers.&quot;\n  (let ((auth-sources (if (equal tramp-current-method &quot;sudo&quot;) nil auth-sources)))\n    (apply orig-fn args)))\n(advice-add #&apos;tramp-read-passwd :around #&apos;+hlissner</em>no-authinfo-for-tramp)</p>\n<p>;;\n(after! smartparens\n  ;; Auto-close more conservatively\n  (let ((unless-list &apos;(sp-point-before-word-p\n                       sp-point-after-word-p\n                       sp-point-before-same-p)))\n    (sp-pair &quot;&apos;&quot;  nil :unless unless-list)\n    (sp-pair &quot;\\&quot;&quot; nil :unless unless-list))\n  (sp-pair &quot;{&quot; nil :post-handlers &apos;((&quot;||\\n[i]&quot; &quot;RET&quot;) (&quot;| &quot; &quot; &quot;))\n           :unless &apos;(sp-point-before-word-p sp-point-before-same-p))\n  (sp-pair &quot;(&quot; nil :post-handlers &apos;((&quot;||\\n[i]&quot; &quot;RET&quot;) (&quot;| &quot; &quot; &quot;))\n           :unless &apos;(sp-point-before-word-p sp-point-before-same-p))\n  (sp-pair &quot;[&quot; nil :post-handlers &apos;((&quot;| &quot; &quot; &quot;))\n           :unless &apos;(sp-point-before-word-p sp-point-before-same-p)))</p>\n<p>;;\n(after! doom-themes\n  ;; Since Fira Mono doesn&apos;t have an italicized variant, highlight it instead\n  (set-face-attribute &apos;italic nil\n                      :weight &apos;ultra-light\n                      :foreground &quot;#ffffff&quot;\n                      :background (doom-color &apos;current-line)))</p>\n<p>(after! evil-mc\n  ;; if I&apos;m in insert mode, chances are I want cursors to resume\n  (add-hook! &apos;evil-mc-before-cursors-created\n    (add-hook &apos;evil-insert-state-entry-hook #&apos;evil-mc-resume-cursors nil t))\n  (add-hook! &apos;evil-mc-after-cursors-deleted\n    (remove-hook &apos;evil-insert-state-entry-hook #&apos;evil-mc-resume-cursors t)))</p>\n<p>(after! evil-escape\n  (setq evil-escape-excluded-states &apos;(normal visual multiedit emacs motion)\n        evil-escape-excluded-major-modes &apos;(neotree-mode)\n        evil-escape-key-sequence &quot;fd&quot;\n        evil-escape-delay 0.25))</p>\n<p>;; Don&apos;t use default snippets, use mine.\n(after! yasnippet\n  (setq yas-snippet-dirs\n        (append (list &apos;+hlissner-snippets-dir)\n                (delq &apos;yas-installed-snippets-dir yas-snippet-dirs))))</p>\n<p>;; app/irc\n;; (after! circe\n;;   (setq +irc-notifications-watch-strings &apos;(&quot;v0&quot; &quot;vnought&quot; &quot;hlissner&quot;))</p>\n<p>;;   (set! :irc &quot;irc.snoonet.org&quot;\n;;     `(:tls t\n;;       :nick &quot;v0&quot;\n;;       :port 6697\n;;       :sasl-username ,(+pass-get-user &quot;irc/snoonet.org&quot;)\n;;       :sasl-password ,(+pass-get-secret &quot;irc/snoonet.org&quot;)\n;;       :channels (:after-auth &quot;#ynought&quot;))))</p>\n<p>;; app/email\n(after! mu4e\n  (setq smtpmail-stream-type &apos;starttls\n        smtpmail-default-smtp-server &quot;smtp.gmail.com&quot;\n        smtpmail-smtp-server &quot;smtp.gmail.com&quot;\n        smtpmail-smtp-service 587)</p>\n<p>  (set! :email &quot;gmail.com&quot;\n    &apos;((mu4e-sent-folder       . &quot;/gmail.com/Sent Mail&quot;)\n      (mu4e-drafts-folder     . &quot;/gmail.com/Drafts&quot;)\n      (mu4e-trash-folder      . &quot;/gmail.com/Trash&quot;)\n      (mu4e-refile-folder     . &quot;/gmail.com/All Mail&quot;)\n      (smtpmail-smtp-user     . &quot;kevnolan&quot;)\n      (user-mail-address      . &quot;kevnolan@gmail.com&quot;)\n      (mu4e-compose-signature . &quot;---\\nKevin Nolan&quot;)))\n  )</p>\n<pre>    <span class=\"hljs-meta\">#+END_SRC</span></pre><p><strong><em>*</em></strong> TODO Bindings\n:PROPERTIES:\n:END:</p>\n<p>#+BEGIN_SRC emacs-lisp</p>\n<p>;; (org-element-map (org-element-parse-buffer) &apos;(example-block src-block) #&apos;identity)</p>\n<p>(defun unflatten (xs &amp;optional fn-value fn-level)\n  &quot;Unflatten a list XS into a tree, e.g. (1 2 3 1) =&gt; (1 (2 (3)) 1).\nFN-VALUE specifies how to extract the values from each element, which\nare included in the output tree, FN-LEVEL tells how to extract the\nlevel of each element. By default these are the `identity&apos; function so\nit will work on a list of numbers.&quot;\n  (let* ((level 1)\n         (tree (cons nil nil))\n         (start tree)\n         (stack nil)\n         (fn-value (or fn-value #&apos;identity))\n         (fn-level (or fn-level #&apos;identity)))\n    (dolist (x xs)\n      (let ((x-value (funcall fn-value x))\n            (x-level (funcall fn-level x)))\n        (cond ((&gt; x-level level)\n               (setcdr tree (cons (cons x-value nil) nil))\n               (setq tree (cdr tree))\n               (push tree stack)\n               (setq tree (car tree))\n               (setq level x-level))\n              ((= x-level level)\n               (setcdr tree (cons x-value nil))\n               (setq tree (cdr tree)))\n              ((&lt; x-level level)\n               (while (&lt; x-level level)\n                 (setq tree (pop stack))\n                 (setq level (- level 1)))\n               (setcdr tree (cons x-value nil))\n               (setq tree (cdr tree))\n               (setq level x-level)))))\n      (cdr start)))</p>\n<p>; eg (unflatten &apos;(1 2 3 2 3 4)) =&gt; &apos;(1 (2 (3) 2 (3 (4))))</p>\n<p>(defun org-get-header-list (&amp;optional buffer) \n  &quot;Get the headers of an org buffer as a flat list of headers and levels.\nBuffer will default to the current buffer.&quot;\n  (interactive)\n  (with-current-buffer (or buffer (current-buffer))\n    (let ((tree (org-element-parse-buffer &apos;headline)))\n      (org-element-map \n          tree \n          &apos;headline\n        (lambda (el) (list \n                 (org-element-property :raw-value el) ; get header title without tags etc\n                 (org-element-property :level el) ; get depth\n                 (org-element-property :F el)\n                 (org-element-property :K el)\n                 ;; &gt;&gt; could add other properties here\n                 )) nil nil &apos;(headline)))))</p>\n<p>; eg (org-get-header-list) =&gt; ((&quot;pok&quot; 1) (&quot;lkm&quot; 1) ((&quot;cedar&quot; 2) (&quot;yr&quot; 2)) (&quot;kjn&quot; 1))</p>\n<p>(defun org-get-header-tree (&amp;optional buffer)\n  &quot;Get the headers of the given org buffer as a tree.&quot;\n  (interactive)\n  (let* ((headers (org-get-header-list buffer))\n         (header-tree (unflatten headers<br>                 (lambda (hl) (list (car hl) (nth 2 hl) (nth 3 hl)))  ; extract information to include in tree\n                 (lambda (hl) (cadr hl))\n)))  ; extract item level\n    header-tree))</p>\n<p>(org-get-header-tree)</p>\n<p>#+END_SRC</p>\n<p>#+RESULTS:\n| Introduction [0/1] | nil | nil |\n| Gui apps           | nil | nil |\n| Commandline apps   | nil | nil |\n| Installation       | nil | nil |</p>\n<p>#+BEGIN_SRC emacs-lisp\n(org-element-map (org-element-parse-buffer) &apos;paragraph\n  (lambda (paragraph)\n    (let ((parent (org-element-property :parent paragraph)))\n      (and (eq (org-element-type parent) &apos;section)\n           (let ((first-child (car (org-element-contents parent))))\n             (eq first-child paragraph))\n           ;; Return value.\n           paragraph))))</p>\n<p>#+END_SRC</p>\n<p>#+RESULTS:\n| paragraph | (:begin 1 :end 47 :contents-begin 1 :contents-end 47 :post-blank 0 :post-affiliated 1 :parent (section (:begin 1 :end 47 :contents-begin 1 :contents-end 47 :post-blank 0 :post-affiliated 1 :parent (org-data nil #1 (headline (:raw-value Introduction [0/1] :begin 47 :end 815 :pre-blank 0 :contents-begin 68 :contents-end 814 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 47 :title (Introduction  (statistics-cookie (:begin 62 :end 67 :value [0/1] :post-blank 0 :parent #4))) :parent #3) (section (:begin 68 :end 815 :contents-begin 68 :contents-end 814 :post-blank 1 :post-affiliated 68 :parent #4) (drawer (:begin 68 :end 102 :drawer-name todo :contents-begin 75 :contents-end 96 :post-blank 0 :post-affiliated 68 :parent #5) (plain-list (:type unordered :begin 75 :end 96 :contents-begin 75 :contents-end 96 :structure ((75 1 -  nil [ ] nil 96)) :post-blank 0 :post-affiliated 75 :parent #6) (item (:bullet -  :begin 75 :end 96 :contents-begin 82 :contents-end 96 :checkbox off :counter nil :structure ((75 1 -  nil [ ] nil 96)) :post-blank 0 :post-affiliated 75 :tag nil :parent #7) (paragraph (:begin 82 :end 96 :contents-begin 82 :contents-end 96 :post-blank 0 :post-affiliated 82 :parent #8) Fix doom link |</p>\n<p>#+BEGIN_SRC emacs-lisp\n(save-excursion\n  (outline-up-heading 1) \n  (org-element-map (org-element-parse-buffer) &apos;section\n     (lambda (section)\n          (org-element-property :value section))))</p>\n<p>#+END_SRC</p>\n<p>#+RESULTS:\n<strong><em>**</em></strong> TODO Global \n<strong><em>**</em></strong> TODO Leader \n<strong><strong>*</strong></strong> TODO TAB :tab_key:\n:PROPERTIES:\n:K: tab\n:F: spacemacs/buffer-alternate\n:END:</p>\n<p><strong><em>**</em></strong> Raw </p>\n<p>#+BEGIN_SRC emacs-lisp :tangle  &quot;~/Github/doom-emacs/modules/private/allforabit/+bindings.el&quot; :mkdirp yes</p>\n<p>;;; private/hlissner/+bindings.el -<em>- lexical-binding: t; -</em>-</p>\n<p>(defmacro find-file-in! (path &amp;optional project-p)\n  &quot;Returns an interactive function for searching files.&quot;\n  `(lambda () (interactive)\n     (let ((default-directory ,path))\n       (call-interactively\n        &apos;,(command-remapping\n           (if project-p</p>\n<pre>           #<span class=\"hljs-symbol\">&apos;projectile</span>-find-<span class=\"hljs-keyword\">file</span>\n         #<span class=\"hljs-symbol\">&apos;find</span>-<span class=\"hljs-keyword\">file</span>))))))</pre><p>(map!\n [remap evil-jump-to-tag] #&apos;projectile-find-tag\n [remap find-tag]         #&apos;projectile-find-tag\n ;; ensure there are no conflicts\n :nmvo doom-leader-key nil\n :nmvo doom-localleader-key nil)</p>\n<p>(defun spacemacs/helm-jump-in-buffer ()\n  &quot;Jump in buffer using `imenu&apos; facilities and helm.&quot;\n  (interactive)\n  (call-interactively\n   (cond\n    ((eq major-mode &apos;org-mode) &apos;helm-org-in-buffer-headings)\n    (t &apos;helm-semantic-or-imenu))))</p>\n<p>(defun spacemacs/alternate-buffer (&amp;optional window)\n  &quot;Switch back and forth between current and last buffer in the\ncurrent window.&quot;\n  (interactive)\n  (let ((current-buffer (window-buffer window)))\n    ;; if no window is found in the windows history, <code>switch-to-buffer&apos; will\n    ;; default to calling</code>other-buffer&apos;.\n    (switch-to-buffer\n     (cl-find-if (lambda (buffer)\n                   (not (eq buffer current-buffer)))\n                 (mapcar #&apos;car (window-prev-buffers window))))))</p>\n<p>(map!\n ;; --- Global keybindings ---------------------------\n ;; Make M-x available everywhere\n :nvime &quot;M-x&quot; #&apos;execute-extended-command\n :nvime &quot;A-x&quot; #&apos;execute-extended-command\n ;; Emacs debug utilities\n &quot;M-;&quot;        #&apos;eval-expression\n :nvime &quot;M-;&quot; #&apos;eval-expression\n &quot;M-:&quot;        #&apos;doom/open-scratch-buffer\n :nvime &quot;M-:&quot; #&apos;doom/open-scratch-buffer\n ;; Text-scaling\n &quot;M-+&quot;    (&#x3BB;! (text-scale-set 0))\n &quot;M-=&quot;    #&apos;text-scale-increase\n &quot;M--&quot;    #&apos;text-scale-decrease\n ;; Simple window navigation/manipulation\n &quot;C-`&quot;    #&apos;doom/popup-toggle\n &quot;C-~&quot;    #&apos;doom/popup-raise\n &quot;M-t&quot;    #&apos;+workspace/new\n &quot;M-T&quot;    #&apos;+workspace/display\n &quot;M-w&quot;    #&apos;delete-window\n &quot;M-W&quot;    #&apos;+workspace/close-workspace-or-frame\n &quot;M-n&quot;    #&apos;evil-buffer-new\n &quot;M-N&quot;    #&apos;make-frame\n &quot;M-1&quot;    (&#x3BB;! (+workspace/switch-to 0))\n &quot;M-2&quot;    (&#x3BB;! (+workspace/switch-to 1))\n &quot;M-3&quot;    (&#x3BB;! (+workspace/switch-to 2))\n &quot;M-4&quot;    (&#x3BB;! (+workspace/switch-to 3))\n &quot;M-5&quot;    (&#x3BB;! (+workspace/switch-to 4))\n &quot;M-6&quot;    (&#x3BB;! (+workspace/switch-to 5))\n &quot;M-7&quot;    (&#x3BB;! (+workspace/switch-to 6))\n &quot;M-8&quot;    (&#x3BB;! (+workspace/switch-to 7))\n &quot;M-9&quot;    (&#x3BB;! (+workspace/switch-to 8))\n &quot;M-0&quot;    #&apos;+workspace/switch-to-last\n ;; Other sensible, textmate-esque global bindings\n &quot;M-r&quot;    #&apos;+eval/buffer\n &quot;M-R&quot;    #&apos;+eval/region-and-replace\n &quot;M-b&quot;    #&apos;+eval/build\n &quot;M-a&quot;    #&apos;mark-whole-buffer\n &quot;M-c&quot;    #&apos;evil-yank\n &quot;M-q&quot;    (if (daemonp) #&apos;delete-frame #&apos;save-buffers-kill-emacs)\n &quot;M-s&quot;    #&apos;save-buffer\n &quot;M-v&quot;    #&apos;clipboard-yank\n &quot;M-f&quot;    #&apos;helm-swoop\n &quot;C-M-f&quot;  #&apos;doom/toggle-fullscreen\n :m &quot;A-j&quot; #&apos;+hlissner:multi-next-line\n :m &quot;A-k&quot; #&apos;+hlissner:multi-previous-line\n :nv &quot;C-SPC&quot; #&apos;+evil:fold-toggle\n ;; Easier window navigation\n ;; :en &quot;C-h&quot;    #&apos;evil-window-left\n ;; :en &quot;C-j&quot;    #&apos;evil-window-down\n ;; :en &quot;C-k&quot;    #&apos;evil-window-up\n ;; :en &quot;C-l&quot;    #&apos;evil-window-right</p>\n<p> (:prefix &quot;C-x&quot;\n   &quot;p&quot; #&apos;doom/other-popup)</p>\n<p> ;; ---  -------------------------------------\n (:leader\n   :desc &quot;Ex command&quot;  :nv &quot;;&quot;   #&apos;evil-ex\n   :desc &quot;M-x&quot;         :nv &quot;:&quot;   #&apos;execute-extended-command\n   :desc &quot;Pop up scratch buffer&quot;   :nv &quot;x&quot;  #&apos;doom/open-scratch-buffer\n   :desc &quot;Org Capture&quot;             :nv &quot;X&quot;  #&apos;+org-capture/open</p>\n<p>   ;; Most commonly used\n   :desc &quot;Find file in project&quot;    :n &quot;SPC&quot; #&apos;execute-extended-command\n   :desc &quot;Switch workspace buffer&quot; :n &quot;,&quot;   #&apos;persp-switch-to-buffer\n   :desc &quot;Switch buffer&quot;           :n &quot;&lt;&quot;   #&apos;switch-to-buffer\n   :desc &quot;Browse files&quot;            :n &quot;.&quot;   #&apos;find-file\n   :desc &quot;Toggle last popup&quot;       :n &quot;~&quot;   #&apos;doom/popup-toggle\n   :desc &quot;Eval expression&quot;         :n &quot;`&quot;   #&apos;eval-expression\n   :desc &quot;Blink cursor line&quot;       :n &quot;DEL&quot; #&apos;+doom/blink-cursor\n   :desc &quot;Jump to bookmark&quot;        :n &quot;RET&quot; #&apos;bookmark-jump</p>\n<p>   :desc &quot;Jump to bookmark&quot;        :n &quot;&apos;&quot; #&apos;+eshell/open-popup</p>\n<p>   ;; C-u is used by evil\n   :desc &quot;Universal argument&quot;    :n &quot;u&quot;  #&apos;universal-argument\n   :desc &quot;window&quot;                :n &quot;w&quot;  evil-window-map</p>\n<p>   :desc &quot;Switch to 1st workspace&quot;  :n &quot;1&quot;   (&#x3BB;! (+workspace/switch-to 0))\n   :desc &quot;Switch to 2nd workspace&quot;  :n &quot;2&quot;   (&#x3BB;! (+workspace/switch-to 1))\n   :desc &quot;Switch to 3rd workspace&quot;  :n &quot;3&quot;   (&#x3BB;! (+workspace/switch-to 2))\n   :desc &quot;Switch to 4th workspace&quot;  :n &quot;4&quot;   (&#x3BB;! (+workspace/switch-to 3))\n   :desc &quot;Switch to 5th workspace&quot;  :n &quot;5&quot;   (&#x3BB;! (+workspace/switch-to 4))\n   :desc &quot;Switch to 6th workspace&quot;  :n &quot;6&quot;   (&#x3BB;! (+workspace/switch-to 5))\n   :desc &quot;Switch to 7th workspace&quot;  :n &quot;7&quot;   (&#x3BB;! (+workspace/switch-to 6))\n   :desc &quot;Switch to 8th workspace&quot;  :n &quot;8&quot;   (&#x3BB;! (+workspace/switch-to 7))\n   :desc &quot;Switch to 9th workspace&quot;  :n &quot;9&quot;   (&#x3BB;! (+workspace/switch-to 8))\n   :desc &quot;Switch to last workspace&quot; :n &quot;0&quot;   #&apos;+workspace/switch-to-last</p>\n<p>   :desc &quot;Switch to last buffer&quot; :n &quot;TAB&quot;   #&apos;spacemacs/alternate-buffer</p>\n<p>   (:desc &quot;previous...&quot; :prefix &quot;[&quot;\n     :desc &quot;Text size&quot;           :nv &quot;[&quot; #&apos;text-scale-decrease\n     :desc &quot;Buffer&quot;              :nv &quot;b&quot; #&apos;doom/previous-buffer\n     :desc &quot;Diff Hunk&quot;           :nv &quot;d&quot; #&apos;git-gutter:previous-hunk\n     :desc &quot;Todo&quot;                :nv &quot;t&quot; #&apos;hl-todo-previous\n     :desc &quot;Error&quot;               :nv &quot;e&quot; #&apos;previous-error\n     :desc &quot;Workspace&quot;           :nv &quot;w&quot; #&apos;+workspace/switch-left\n     :desc &quot;Smart jump&quot;          :nv &quot;h&quot; #&apos;smart-backward\n     :desc &quot;Spelling error&quot;      :nv &quot;s&quot; #&apos;evil-prev-flyspell-error\n     :desc &quot;Spelling correction&quot; :n  &quot;S&quot; #&apos;flyspell-correct-previous-word-generic)</p>\n<p>   (:desc &quot;next...&quot; :prefix &quot;]&quot;\n     :desc &quot;Text size&quot;           :nv &quot;]&quot; #&apos;text-scale-increase\n     :desc &quot;Buffer&quot;              :nv &quot;b&quot; #&apos;doom/next-buffer\n     :desc &quot;Diff Hunk&quot;           :nv &quot;d&quot; #&apos;git-gutter:next-hunk\n     :desc &quot;Todo&quot;                :nv &quot;t&quot; #&apos;hl-todo-next\n     :desc &quot;Error&quot;               :nv &quot;e&quot; #&apos;next-error\n     :desc &quot;Workspace&quot;           :nv &quot;w&quot; #&apos;+workspace/switch-right\n     :desc &quot;Smart jump&quot;          :nv &quot;l&quot; #&apos;smart-forward\n     :desc &quot;Spelling error&quot;      :nv &quot;s&quot; #&apos;evil-next-flyspell-error\n     :desc &quot;Spelling correction&quot; :n  &quot;S&quot; #&apos;flyspell-correct-word-generic)</p>\n<p>   (:desc &quot;buffer&quot; :prefix &quot;b&quot;\n     :desc &quot;New empty buffer&quot;        :n &quot;n&quot; #&apos;evil-buffer-new\n     :desc &quot;Switch workspace buffer&quot; :n &quot;b&quot; #&apos;persp-switch-to-buffer\n     :desc &quot;Switch buffer&quot;           :n &quot;B&quot; #&apos;switch-to-buffer\n     :desc &quot;Kill buffer&quot;             :n &quot;d&quot; #&apos;doom/kill-this-buffer\n     :desc &quot;Kill buffer&quot;             :n &quot;k&quot; #&apos;doom/kill-this-buffer\n     :desc &quot;Kill other buffers&quot;      :n &quot;o&quot; #&apos;doom/kill-other-buffers\n     :desc &quot;Save buffer&quot;             :n &quot;s&quot; #&apos;save-buffer\n     :desc &quot;Pop scratch buffer&quot;      :n &quot;x&quot; #&apos;doom/open-scratch-buffer\n     :desc &quot;Bury buffer&quot;             :n &quot;z&quot; #&apos;bury-buffer\n     :desc &quot;Next buffer&quot;             :n &quot;]&quot; #&apos;doom/next-buffer\n     :desc &quot;Previous buffer&quot;         :n &quot;[&quot; #&apos;doom/previous-buffer\n     :desc &quot;Sudo edit this file&quot;     :n &quot;S&quot; #&apos;doom/sudo-this-file)</p>\n<p>   (:desc &quot;code&quot; :prefix &quot;c&quot;\n     :desc &quot;List errors&quot;               :n  &quot;x&quot; #&apos;flycheck-list-errors\n     :desc &quot;Evaluate buffer/region&quot;    :n  &quot;e&quot; #&apos;+eval/buffer\n                                       :v  &quot;e&quot; #&apos;+eval/region\n     :desc &quot;Evaluate &amp; replace region&quot; :nv &quot;E&quot; #&apos;+eval:replace-region\n     :desc &quot;Build tasks&quot;               :nv &quot;b&quot; #&apos;+eval/build\n     :desc &quot;Jump to definition&quot;        :n  &quot;d&quot; #&apos;+jump/definition\n     :desc &quot;Jump to references&quot;        :n  &quot;D&quot; #&apos;+jump/references\n     :desc &quot;Open REPL&quot;                 :n  &quot;r&quot; #&apos;+eval/open-repl\n                                       :v  &quot;r&quot; #&apos;+eval:repl)</p>\n<p>   (:desc &quot;code&quot; :prefix &quot;e&quot;\n     :desc &quot;Revert buffer&quot;               :n  &quot;x&quot; #&apos;revert-buffer)</p>\n<p>   (:desc &quot;file&quot; :prefix &quot;f&quot;\n     :desc &quot;File file&quot;                 :n &quot;f&quot; #&apos;find-file\n     :desc &quot;Save file&quot;                 :n &quot;s&quot; #&apos;save-buffer\n     :desc &quot;Sudo find file&quot;            :n &quot;&gt;&quot; #&apos;doom/sudo-find-file\n     :desc &quot;Find file in project&quot;      :n &quot;/&quot; #&apos;projectile-find-file\n     :desc &quot;Find file from here&quot;       :n &quot;?&quot; #&apos;counsel-file-jump\n     :desc &quot;Find other file&quot;           :n &quot;a&quot; #&apos;projectile-find-other-file\n     :desc &quot;Open project editorconfig&quot; :n &quot;c&quot; #&apos;editorconfig-find-current-editorconfig\n     :desc &quot;Find file in dotfiles&quot;     :n &quot;d&quot; #&apos;+hlissner/find-in-dotfiles\n     :desc &quot;Browse dotfiles&quot;           :n &quot;D&quot; #&apos;+hlissner/browse-dotfiles\n     :desc &quot;Find file in emacs.d&quot;      :n &quot;e&quot; #&apos;+hlissner/find-in-emacsd\n     :desc &quot;Browse emacs.d&quot;            :n &quot;E&quot; #&apos;+hlissner/browse-emacsd\n     :desc &quot;Recent files&quot;              :n &quot;r&quot; #&apos;helm-recentf\n     :desc &quot;Recent project files&quot;      :n &quot;R&quot; #&apos;projectile-recentf\n     :desc &quot;Yank filename&quot;             :n &quot;y&quot; #&apos;+hlissner/yank-buffer-filename)</p>\n<p>   (:desc &quot;git&quot; :prefix &quot;g&quot;\n     :desc &quot;Git status&quot;        :n  &quot;S&quot; #&apos;magit-status\n     :desc &quot;Git blame&quot;         :n  &quot;b&quot; #&apos;magit-blame\n     :desc &quot;Git time machine&quot;  :n  &quot;t&quot; #&apos;git-timemachine-toggle\n     :desc &quot;Git stage hunk&quot;    :n  &quot;s&quot; #&apos;git-gutter:stage-hunk\n     :desc &quot;Git revert hunk&quot;   :n  &quot;r&quot; #&apos;git-gutter:revert-hunk\n     :desc &quot;Git revert buffer&quot; :n  &quot;R&quot; #&apos;vc-revert\n     :desc &quot;List gists&quot;        :n  &quot;g&quot; #&apos;+gist:list\n     :desc &quot;Next hunk&quot;         :nv &quot;]&quot; #&apos;git-gutter:next-hunk\n     :desc &quot;Previous hunk&quot;     :nv &quot;[&quot; #&apos;git-gutter:previous-hunk)</p>\n<p>   (:desc &quot;help&quot; :prefix &quot;h&quot;\n     :n &quot;h&quot; help-map\n     :desc &quot;Apropos&quot;               :n &quot;a&quot; #&apos;apropos\n     :desc &quot;Reload theme&quot;          :n &quot;R&quot; #&apos;doom/reload-theme\n     :desc &quot;Find library&quot;          :n &quot;l&quot; #&apos;find-library\n     :desc &quot;Toggle Emacs log&quot;      :n &quot;m&quot; #&apos;doom/popup-toggle-messages\n     :desc &quot;Command log&quot;           :n &quot;L&quot; #&apos;global-command-log-mode\n     :desc &quot;Describe function&quot;     :n &quot;f&quot; #&apos;describe-function\n     :desc &quot;Describe key&quot;          :n &quot;k&quot; #&apos;describe-key\n     :desc &quot;Describe char&quot;         :n &quot;c&quot; #&apos;describe-char\n     :desc &quot;Describe mode&quot;         :n &quot;M&quot; #&apos;describe-mode\n     :desc &quot;Describe variable&quot;     :n &quot;v&quot; #&apos;describe-variable\n     :desc &quot;Describe face&quot;         :n &quot;F&quot; #&apos;describe-face\n     :desc &quot;Describe DOOM setting&quot; :n &quot;s&quot; #&apos;doom/describe-setting\n     :desc &quot;Describe DOOM module&quot;  :n &quot;d&quot; #&apos;doom/describe-module\n     :desc &quot;Find definition&quot;       :n &quot;.&quot; #&apos;+jump/definition\n     :desc &quot;Find references&quot;       :n &quot;/&quot; #&apos;+jump/references\n     :desc &quot;Find documentation&quot;    :n &quot;h&quot; #&apos;+jump/documentation\n     :desc &quot;What face&quot;             :n &quot;&apos;&quot; #&apos;doom/what-face\n     :desc &quot;What minor modes&quot;      :n &quot;;&quot; #&apos;doom/what-minor-mode\n     :desc &quot;Info&quot;                  :n &quot;i&quot; #&apos;info\n     :desc &quot;Toggle profiler&quot;       :n &quot;p&quot; #&apos;doom/toggle-profiler)</p>\n<p>   (:desc &quot;insert&quot; :prefix &quot;i&quot;\n     :desc &quot;From kill-ring&quot; :nv &quot;y&quot; #&apos;counsel-yank-pop\n     :desc &quot;From snippet&quot;   :nv &quot;s&quot; #&apos;yas-insert-snippet)</p>\n<p>   (:desc &quot;insert&quot; :prefix &quot;j&quot;\n     :desc &quot;Jump in&quot; :nv &quot;i&quot; #&apos;spacemacs/helm-jump-in-buffer)</p>\n<p>   ;; Change to spacemacs prefix\n   (:desc &quot;workspace&quot; :prefix &quot;l&quot;\n     :desc &quot;Display tab bar&quot;          :n &quot;TAB&quot; #&apos;+workspace/display\n     :desc &quot;New workspace&quot;            :n &quot;n&quot;   #&apos;+workspace/new\n     :desc &quot;Restore workspace from file&quot; :n &quot;r&quot;   #&apos;+workspace/load\n     :desc &quot;Restore last session&quot;        :n &quot;R&quot;   (&#x3BB;! (+workspace/load-session))\n     :desc &quot;Save workspace to file&quot;   :n &quot;s&quot;   #&apos;+workspace/save\n     :desc &quot;Autosave current session&quot; :n &quot;S&quot;   #&apos;+workspace/save-session\n     :desc &quot;Switch workspace&quot;         :n &quot;l&quot;   #&apos;+workspace/switch-to\n     :desc &quot;Kill all buffers&quot;         :n &quot;x&quot;   #&apos;doom/kill-all-buffers\n     :desc &quot;Delete session&quot;           :n &quot;X&quot;   #&apos;+workspace/kill-session\n     :desc &quot;Delete this workspace&quot;    :n &quot;d&quot;   #&apos;+workspace/delete\n     :desc &quot;Load session&quot;             :n &quot;L&quot;   #&apos;+workspace/load-session\n     :desc &quot;Next workspace&quot;           :n &quot;]&quot;   #&apos;+workspace/switch-right\n     :desc &quot;Previous workspace&quot;       :n &quot;[&quot;   #&apos;+workspace/switch-left\n     :desc &quot;Switch to 1st workspace&quot;  :n &quot;1&quot;   (&#x3BB;! (+workspace/switch-to 0))\n     :desc &quot;Switch to 2nd workspace&quot;  :n &quot;2&quot;   (&#x3BB;! (+workspace/switch-to 1))\n     :desc &quot;Switch to 3rd workspace&quot;  :n &quot;3&quot;   (&#x3BB;! (+workspace/switch-to 2))\n     :desc &quot;Switch to 4th workspace&quot;  :n &quot;4&quot;   (&#x3BB;! (+workspace/switch-to 3))\n     :desc &quot;Switch to 5th workspace&quot;  :n &quot;5&quot;   (&#x3BB;! (+workspace/switch-to 4))\n     :desc &quot;Switch to 6th workspace&quot;  :n &quot;6&quot;   (&#x3BB;! (+workspace/switch-to 5))\n     :desc &quot;Switch to 7th workspace&quot;  :n &quot;7&quot;   (&#x3BB;! (+workspace/switch-to 6))\n     :desc &quot;Switch to 8th workspace&quot;  :n &quot;8&quot;   (&#x3BB;! (+workspace/switch-to 7))\n     :desc &quot;Switch to 9th workspace&quot;  :n &quot;9&quot;   (&#x3BB;! (+workspace/switch-to 8))\n     :desc &quot;Switch to last workspace&quot; :n &quot;0&quot;   #&apos;+workspace/switch-to-last)</p>\n<p>   (:desc &quot;notes&quot; :prefix &quot;n&quot;\n     :desc &quot;Find file in notes&quot;    :n &quot;n&quot; #&apos;+hlissner/find-in-notes\n     :desc &quot;Browse notes&quot;          :n &quot;N&quot; #&apos;+hlissner/browse-notes\n     :desc &quot;Org capture&quot;           :n &quot;x&quot; #&apos;+org-capture/open\n     :desc &quot;Browse mode notes&quot;     :n &quot;m&quot; #&apos;+org/browse-notes-for-major-mode\n     :desc &quot;Browse project notes&quot;  :n &quot;p&quot; #&apos;+org/browse-notes-for-project)</p>\n<p>   (:desc &quot;open&quot; :prefix &quot;o&quot;\n     :desc &quot;Default browser&quot;     :n  &quot;b&quot; #&apos;browse-url-of-file\n     :desc &quot;Debugger&quot;            :n  &quot;d&quot; #&apos;+debug/open\n     :desc &quot;REPL&quot;                :n  &quot;r&quot; #&apos;+eval/open-repl\n                                 :v  &quot;r&quot; #&apos;+eval:repl\n     :desc &quot;Neotree&quot;             :n  &quot;n&quot; #&apos;+neotree/toggle\n     :desc &quot;Terminal&quot;            :n  &quot;t&quot; #&apos;+term/open-popup\n     :desc &quot;Terminal in project&quot; :n  &quot;T&quot; #&apos;+term/open-popup-in-project</p>\n<pre> ;; applications\n <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;APP: elfeed&quot;</span>  <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;E&quot;</span> <span class=\"hljs-comment\">#&apos;=rss</span>\n <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;APP: email&quot;</span>   <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;M&quot;</span> <span class=\"hljs-comment\">#&apos;=email</span>\n <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;APP: twitter&quot;</span> <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;T&quot;</span> <span class=\"hljs-comment\">#&apos;=twitter</span>\n <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;APP: regex&quot;</span>   <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;X&quot;</span> <span class=\"hljs-comment\">#&apos;=regex</span>\n\n ;; macos\n (<span class=\"hljs-symbol\">:when</span> IS-MAC\n   <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;Reveal in Finder&quot;</span>          <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;o&quot;</span> <span class=\"hljs-comment\">#&apos;+macos/reveal-in-finder</span>\n   <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;Reveal project in Finder&quot;</span>  <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;O&quot;</span> <span class=\"hljs-comment\">#&apos;+macos/reveal-project-in-finder</span>\n   <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;Send to Transmit&quot;</span>          <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;u&quot;</span> <span class=\"hljs-comment\">#&apos;+macos/send-to-transmit</span>\n   <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;Send project to Transmit&quot;</span>  <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;U&quot;</span> <span class=\"hljs-comment\">#&apos;+macos/send-project-to-transmit</span>\n   <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;Send to Launchbar&quot;</span>         <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;l&quot;</span> <span class=\"hljs-comment\">#&apos;+macos/send-to-launchbar</span>\n   <span class=\"hljs-symbol\">:desc</span> <span class=\"hljs-string\">&quot;Send project to Launchbar&quot;</span> <span class=\"hljs-symbol\">:n</span> <span class=\"hljs-string\">&quot;L&quot;</span> <span class=\"hljs-comment\">#&apos;+macos/send-project-to-launchbar))</span></pre><p>   (:desc &quot;project&quot; :prefix &quot;p&quot;\n     :desc &quot;Browse project&quot;          :n  &quot;.&quot; (find-file-in! (doom-project-root))\n     :desc &quot;Find file in project&quot;    :n  &quot;/&quot; #&apos;projectile-find-file\n     :desc &quot;Run cmd in project root&quot; :nv &quot;!&quot; #&apos;projectile-run-shell-command-in-root\n     :desc &quot;Switch project&quot;          :n  &quot;p&quot; #&apos;projectile-switch-project\n     :desc &quot;Recent project files&quot;    :n  &quot;r&quot; #&apos;projectile-recentf\n     :desc &quot;List project tasks&quot;      :n  &quot;t&quot; #&apos;+ivy/tasks\n     :desc &quot;Pop term in project&quot;     :n  &quot;o&quot; #&apos;+term/open-popup-in-project\n     :desc &quot;Invalidate cache&quot;        :n  &quot;x&quot; #&apos;projectile-invalidate-cache)</p>\n<p>   (:desc &quot;quit&quot; :prefix &quot;q&quot;\n     :desc &quot;Quit&quot;                    :n &quot;q&quot; #&apos;evil-save-and-quit\n     :desc &quot;Quit (forget session)&quot;   :n &quot;Q&quot; #&apos;+workspace/kill-session-and-quit)</p>\n<p>   (:desc &quot;remote&quot; :prefix &quot;r&quot;\n     :desc &quot;Upload local&quot;           :n &quot;u&quot; #&apos;+upload/local\n     :desc &quot;Upload local (force)&quot;   :n &quot;U&quot; (&#x3BB;! (+upload/local t))\n     :desc &quot;Download remote&quot;        :n &quot;d&quot; #&apos;+upload/remote-download\n     :desc &quot;Diff local &amp; remote&quot;    :n &quot;D&quot; #&apos;+upload/diff\n     :desc &quot;Browse remote files&quot;    :n &quot;.&quot; #&apos;+upload/browse\n     :desc &quot;Detect remote changes&quot;  :n &quot;&gt;&quot; #&apos;+upload/check-remote)</p>\n<p>   (:desc &quot;search&quot; :prefix &quot;s&quot;\n     :desc &quot;Helm swoop&quot;                :nv &quot;s&quot; #&apos;helm-swoop)</p>\n<p>   ;; (:desc &quot;snippets&quot; :prefix &quot;s&quot;\n   ;;   :desc &quot;New snippet&quot;           :n  &quot;n&quot; #&apos;yas-new-snippet\n   ;;   :desc &quot;Insert snippet&quot;        :nv &quot;i&quot; #&apos;yas-insert-snippet\n   ;;   :desc &quot;Find snippet for mode&quot; :n  &quot;s&quot; #&apos;yas-visit-snippet-file\n   ;;   :desc &quot;Find snippet&quot;          :n  &quot;S&quot; #&apos;+hlissner/find-in-snippets)</p>\n<p>   (:desc &quot;toggle&quot; :prefix &quot;t&quot;\n     :desc &quot;Flyspell&quot;               :n &quot;s&quot; #&apos;flyspell-mode\n     :desc &quot;Flycheck&quot;               :n &quot;f&quot; #&apos;flycheck-mode\n     :desc &quot;Line numbers&quot;           :n &quot;l&quot; #&apos;doom/toggle-line-numbers\n     :desc &quot;Fullscreen&quot;             :n &quot;f&quot; #&apos;doom/toggle-fullscreen\n     :desc &quot;Indent guides&quot;          :n &quot;i&quot; #&apos;highlight-indentation-mode\n     :desc &quot;Indent guides (column)&quot; :n &quot;I&quot; #&apos;highlight-indentation-current-column-mode\n     :desc &quot;Impatient mode&quot;         :n &quot;h&quot; #&apos;+impatient-mode/toggle\n     :desc &quot;Big mode&quot;               :n &quot;b&quot; #&apos;doom-big-font-mode\n     :desc &quot;Evil goggles&quot;           :n &quot;g&quot; #&apos;+evil-goggles/toggle))</p>\n<p> ;; --- Personal vim-esque bindings ------------------\n :n  &quot;zx&quot; #&apos;doom/kill-this-buffer\n :n  &quot;ZX&quot; #&apos;bury-buffer\n :n  &quot;]b&quot; #&apos;doom/next-buffer\n :n  &quot;[b&quot; #&apos;doom/previous-buffer\n :n  &quot;]w&quot; #&apos;+workspace/switch-right\n :n  &quot;[w&quot; #&apos;+workspace/switch-left\n :m  &quot;gt&quot; #&apos;+workspace/switch-right\n :m  &quot;gT&quot; #&apos;+workspace/switch-left\n :m  &quot;gd&quot; #&apos;+jump/definition\n :m  &quot;gD&quot; #&apos;+jump/references\n :m  &quot;gh&quot; #&apos;+jump/documentation\n :n  &quot;gp&quot; #&apos;+evil/reselect-paste\n :n  &quot;gr&quot; #&apos;+eval:region\n :n  &quot;gR&quot; #&apos;+eval/buffer\n :v  &quot;gR&quot; #&apos;+eval:replace-region\n :v  &quot;@&quot;  #&apos;+evil:macro-on-all-lines\n :n  &quot;g@&quot; #&apos;+evil:macro-on-all-lines\n ;; repeat in visual mode (FIXME buggy)\n :v  &quot;.&quot;  #&apos;evil-repeat\n ;; don&apos;t leave visual mode after shifting\n :v  &quot;&lt;&quot;  #&apos;+evil/visual-dedent  ; vnoremap &lt; &lt;gv\n :v  &quot;&gt;&quot;  #&apos;+evil/visual-indent  ; vnoremap &gt; &gt;gv\n ;; paste from recent yank register (which isn&apos;t overwritten)\n :v  &quot;C-p&quot; &quot;\\&quot;0p&quot;</p>\n<p> (:map evil-window-map ; prefix &quot;C-w&quot;\n   ;; Navigation\n   &quot;C-h&quot;     #&apos;evil-window-left\n   &quot;C-j&quot;     #&apos;evil-window-down\n   &quot;C-k&quot;     #&apos;evil-window-up\n   &quot;C-l&quot;     #&apos;evil-window-right\n   &quot;C-w&quot;     #&apos;ace-window\n   ;; Swapping windows\n   &quot;H&quot;       #&apos;+evil/window-move-left\n   &quot;J&quot;       #&apos;+evil/window-move-down\n   &quot;K&quot;       #&apos;+evil/window-move-up\n   &quot;L&quot;       #&apos;+evil/window-move-right\n   &quot;C-S-w&quot;   #&apos;ace-swap-window\n   ;; Window undo/redo\n   &quot;u&quot;       #&apos;winner-undo\n   &quot;C-u&quot;     #&apos;winner-undo\n   &quot;C-r&quot;     #&apos;winner-redo\n   &quot;o&quot;       #&apos;doom/window-enlargen\n   ;; Delete window\n   &quot;d&quot;       #&apos;+workspace/close-window-or-workspace\n   &quot;D&quot;     #&apos;ace-delete-window)</p>\n<p> ;; --- Plugin bindings ------------------------------\n ;; auto-yasnippet\n :i  [C-tab] #&apos;aya-expand\n :nv [C-tab] #&apos;aya-create</p>\n<p> ;; company-mode (vim-like omnicompletion)\n :i &quot;C-SPC&quot;  #&apos;+company/complete\n (:prefix &quot;C-x&quot;\n   :i &quot;C-l&quot;   #&apos;+company/whole-lines\n   :i &quot;C-k&quot;   #&apos;+company/dict-or-keywords\n   :i &quot;C-f&quot;   #&apos;company-files\n   :i &quot;C-]&quot;   #&apos;company-etags\n   :i &quot;s&quot;     #&apos;company-ispell\n   :i &quot;C-s&quot;   #&apos;company-yasnippet\n   :i &quot;C-o&quot;   #&apos;company-capf\n   :i &quot;C-n&quot;   #&apos;company-dabbrev-code\n   :i &quot;C-p&quot;   #&apos;+company/dabbrev-code-previous)\n (:after company\n   (:map company-active-map\n     ;; Don&apos;t interfere with <code>evil-delete-backward-word&apos; in insert mode\n     &quot;C-w&quot;        nil\n     &quot;C-o&quot;        #&apos;company-search-kill-others\n     &quot;C-n&quot;        #&apos;company-select-next\n     &quot;C-p&quot;        #&apos;company-select-previous\n     &quot;C-h&quot;        #&apos;company-quickhelp-manual-begin\n     &quot;C-S-h&quot;      #&apos;company-show-doc-buffer\n     &quot;C-S-s&quot;      #&apos;company-search-candidates\n     &quot;C-s&quot;        #&apos;company-filter-candidates\n     &quot;C-SPC&quot;      #&apos;company-complete-common\n     &quot;C-h&quot;        #&apos;company-quickhelp-manual-begin\n     [tab]        #&apos;company-complete-common-or-cycle\n     [backtab]    #&apos;company-select-previous\n     [escape]     (&#x3BB;! (company-abort) (evil-normal-state 1)))\n   ;; Automatically applies to</code>company-filter-map&apos;\n   (:map company-search-map\n     &quot;C-n&quot;        #&apos;company-search-repeat-forward\n     &quot;C-p&quot;        #&apos;company-search-repeat-backward\n     &quot;C-s&quot;        (&#x3BB;! (company-search-abort) (company-filter-candidates))\n     [escape]     #&apos;company-search-abort))</p>\n<p> ;; counsel\n (:after counsel\n   (:map counsel-ag-map\n     [backtab]  #&apos;+ivy/wgrep-occur  ; search/replace on results\n     &quot;C-SPC&quot;    #&apos;counsel-git-grep-recenter   ; preview\n     &quot;M-RET&quot;    (+ivy-do-action! #&apos;+ivy-git-grep-other-window-action)))</p>\n<p> ;; evil-commentary\n :n  &quot;gc&quot;  #&apos;evil-commentary</p>\n<p> ;; evil-exchange\n :n  &quot;gx&quot;  #&apos;evil-exchange</p>\n<p> ;; evil-matchit\n :nv [tab] #&apos;+evil/matchit-or-toggle-fold</p>\n<p> ;; evil-magit\n (:after evil-magit\n   :map (magit-status-mode-map magit-revision-mode-map)\n   :n &quot;C-j&quot; nil\n   :n &quot;C-k&quot; nil)</p>\n<p> ;; evil-mc\n (:prefix &quot;gz&quot;\n   :nv &quot;m&quot; #&apos;evil-mc-make-all-cursors\n   :nv &quot;u&quot; #&apos;evil-mc-undo-all-cursors\n   :nv &quot;z&quot; #&apos;+evil/mc-make-cursor-here\n   :nv &quot;t&quot; #&apos;+evil/mc-toggle-cursors\n   :nv &quot;n&quot; #&apos;evil-mc-make-and-goto-next-cursor\n   :nv &quot;p&quot; #&apos;evil-mc-make-and-goto-prev-cursor\n   :nv &quot;N&quot; #&apos;evil-mc-make-and-goto-last-cursor\n   :nv &quot;P&quot; #&apos;evil-mc-make-and-goto-first-cursor\n   :nv &quot;d&quot; #&apos;evil-mc-make-and-goto-next-match\n   :nv &quot;D&quot; #&apos;evil-mc-make-and-goto-prev-match)\n (:after evil-mc\n   :map evil-mc-key-map\n   :nv &quot;C-n&quot; #&apos;evil-mc-make-and-goto-next-cursor\n   :nv &quot;C-N&quot; #&apos;evil-mc-make-and-goto-last-cursor\n   :nv &quot;C-p&quot; #&apos;evil-mc-make-and-goto-prev-cursor\n   :nv &quot;C-P&quot; #&apos;evil-mc-make-and-goto-first-cursor)</p>\n<p> ;; evil-multiedit\n :v  &quot;R&quot;     #&apos;evil-multiedit-match-all\n :n  &quot;M-d&quot;   #&apos;evil-multiedit-match-symbol-and-next\n :n  &quot;M-D&quot;   #&apos;evil-multiedit-match-symbol-and-prev\n :v  &quot;M-d&quot;   #&apos;evil-multiedit-match-and-next\n :v  &quot;M-D&quot;   #&apos;evil-multiedit-match-and-prev\n :nv &quot;C-M-d&quot; #&apos;evil-multiedit-restore\n (:after evil-multiedit\n   (:map evil-multiedit-state-map\n     &quot;M-d&quot; #&apos;evil-multiedit-match-and-next\n     &quot;M-D&quot; #&apos;evil-multiedit-match-and-prev\n     &quot;RET&quot; #&apos;evil-multiedit-toggle-or-restrict-region)\n   (:map (evil-multiedit-state-map evil-multiedit-insert-state-map)\n     &quot;C-n&quot; #&apos;evil-multiedit-next\n     &quot;C-p&quot; #&apos;evil-multiedit-prev))</p>\n<p> ;; evil-snipe\n (:after evil-snipe\n   ;; Binding to switch to evil-easymotion/avy after a snipe\n   :map evil-snipe-parent-transient-map\n   &quot;C-;&quot; (&#x3BB;! (require &apos;evil-easymotion)\n             (call-interactively\n              (evilem-create #&apos;evil-snipe-repeat\n                             :bind ((evil-snipe-scope &apos;whole-buffer)\n                                    (evil-snipe-enable-highlight)\n                                    (evil-snipe-enable-incremental-highlight))))))</p>\n<p> ;; evil-surround\n :v  &quot;S&quot;  #&apos;evil-surround-region\n :o  &quot;s&quot;  #&apos;evil-surround-edit\n :o  &quot;S&quot;  #&apos;evil-Surround-edit</p>\n<p> ;; expand-region\n :v  &quot;v&quot;  #&apos;er/expand-region\n :v  &quot;V&quot;  #&apos;er/contract-region</p>\n<p> ;; flycheck\n :m  &quot;]e&quot; #&apos;next-error\n :m  &quot;[e&quot; #&apos;previous-error\n (:after flycheck\n   :map flycheck-error-list-mode-map\n   :n &quot;C-n&quot; #&apos;flycheck-error-list-next-error\n   :n &quot;C-p&quot; #&apos;flycheck-error-list-previous-error\n   :n &quot;j&quot;   #&apos;flycheck-error-list-next-error\n   :n &quot;k&quot;   #&apos;flycheck-error-list-previous-error\n   :n &quot;RET&quot; #&apos;flycheck-error-list-goto-error)</p>\n<p> ;; flyspell\n :m  &quot;]S&quot; #&apos;flyspell-correct-word-generic\n :m  &quot;[S&quot; #&apos;flyspell-correct-previous-word-generic</p>\n<p> ;; git-gutter\n :m  &quot;]d&quot; #&apos;git-gutter:next-hunk\n :m  &quot;[d&quot; #&apos;git-gutter:previous-hunk</p>\n<p> ;; git-timemachine\n (:after git-timemachine\n   (:map git-timemachine-mode-map\n     :nv &quot;p&quot; #&apos;git-timemachine-show-previous-revision\n     :nv &quot;n&quot; #&apos;git-timemachine-show-next-revision\n     :nv &quot;g&quot; #&apos;git-timemachine-show-nth-revision\n     :nv &quot;q&quot; #&apos;git-timemachine-quit\n     :nv &quot;w&quot; #&apos;git-timemachine-kill-abbreviated-revision\n     :nv &quot;W&quot; #&apos;git-timemachine-kill-revision\n     :nv &quot;b&quot; #&apos;git-timemachine-blame))</p>\n<p> ;; gist\n (:after gist\n   :map gist-list-menu-mode-map\n   :n &quot;RET&quot; #&apos;+gist/open-current\n   :n &quot;b&quot;   #&apos;gist-browse-current-url\n   :n &quot;c&quot;   #&apos;gist-add-buffer\n   :n &quot;d&quot;   #&apos;gist-kill-current\n   :n &quot;f&quot;   #&apos;gist-fork\n   :n &quot;q&quot;   #&apos;quit-window\n   :n &quot;r&quot;   #&apos;gist-list-reload\n   :n &quot;s&quot;   #&apos;gist-star\n   :n &quot;S&quot;   #&apos;gist-unstar\n   :n &quot;y&quot;   #&apos;gist-print-current-url)</p>\n<p> ;; helm\n;; helm navigation on hjkl\n;; From spacemacs\n;; (defun spacemacs//helm-hjkl-navigation (style)\n;;   &quot;Set navigation on &apos;hjkl&apos; for the given editing STYLE.&quot;\n;;   (cond\n;;    ((or (eq &apos;vim style)\n;;         (and (eq &apos;hybrid style)\n;;              hybrid-mode-enable-hjkl-bindings))\n;;     (define-key helm-map (kbd &quot;C-j&quot;) &apos;helm-next-line)\n;;     (define-key helm-map (kbd &quot;C-k&quot;) &apos;helm-previous-line)\n;;     (define-key helm-map (kbd &quot;C-h&quot;) &apos;helm-next-source)\n;;     (define-key helm-map (kbd &quot;C-S-h&quot;) &apos;describe-key)\n;;     (define-key helm-map (kbd &quot;C-l&quot;) (kbd &quot;RET&quot;))\n;;     (with-eval-after-load &apos;helm-files\n;;       (dolist (keymap (list helm-find-files-map helm-read-file-map))\n;;         (define-key keymap (kbd &quot;C-l&quot;) &apos;helm-execute-persistent-action)\n;;         (define-key keymap (kbd &quot;C-h&quot;) &apos;helm-find-files-up-one-level)\n;;         ;; rebind `describe-key&apos; for convenience\n;;         (define-key keymap (kbd &quot;C-S-h&quot;) &apos;describe-key))))\n;;    (t\n;;     (define-key helm-map (kbd &quot;C-j&quot;) &apos;helm-execute-persistent-action)\n;;     (define-key helm-map (kbd &quot;C-k&quot;) &apos;helm-delete-minibuffer-contents)\n;;     (define-key helm-map (kbd &quot;C-h&quot;) nil)\n;;     (define-key helm-map\n;;       (kbd &quot;C-l&quot;) &apos;helm-recenter-top-bottom-other-window))))</p>\n<p> (:after helm\n   (:map helm-map\n     &quot;ESC&quot;        nil\n     &quot;C-j&quot;      #&apos;helm-next-line\n     &quot;C-k&quot;      #&apos;helm-previous-line\n     &quot;C-h&quot;      #&apos;helm-next-source\n     &quot;C-S-h&quot;      #&apos;describe-key\n     &quot;C-l&quot;      #&apos;helm-execute-persistent-action\n     &quot;C-u&quot;        #&apos;helm-delete-minibuffer-contents\n     &quot;C-h&quot;        #&apos;backward-kill-word\n     &quot;C-r&quot;        #&apos;evil-paste-from-register ; Evil registers in helm! Glorious!\n     &quot;C-b&quot;        #&apos;backward-word\n     [left]       #&apos;backward-char\n     [right]      #&apos;forward-char\n     [escape]     #&apos;helm-keyboard-quit\n     [tab]        #&apos;helm-execute-persistent-action)</p>\n<p>   (:after helm-files\n     (:map helm-generic-files-map\n       &quot;C-l&quot;     #&apos;helm-execute-persistent-action\n       &quot;C-h&quot;     #&apos;helm-find-files-up-one-level)\n     (:map helm-find-files-map\n       &quot;C-h&quot; #&apos;helm-find-files-up-one-level\n       &quot;C-l&quot; #&apos;helm-execute-persistent-action))</p>\n<p>   (:after helm-ag\n     (:map helm-ag-map\n       &quot;&quot;  #&apos;helm-ag-edit)))</p>\n<p> ;; hl-todo\n :m  &quot;]t&quot; #&apos;hl-todo-next\n :m  &quot;[t&quot; #&apos;hl-todo-previous</p>\n<p> ;; ivy\n (:after ivy\n   :map ivy-minibuffer-map\n   [escape] #&apos;keyboard-escape-quit\n   &quot;M-v&quot; #&apos;yank\n   &quot;M-z&quot; #&apos;undo\n   &quot;C-r&quot; #&apos;evil-paste-from-register\n   &quot;C-k&quot; #&apos;ivy-previous-line\n   &quot;C-j&quot; #&apos;ivy-next-line\n   &quot;C-l&quot; #&apos;ivy-alt-done\n   &quot;C-w&quot; #&apos;ivy-backward-kill-word\n   &quot;C-u&quot; #&apos;ivy-kill-line\n   &quot;C-b&quot; #&apos;backward-word\n   &quot;C-f&quot; #&apos;forward-word)</p>\n<p> ;; neotree\n (:after neotree\n   :map neotree-mode-map\n   :n &quot;g&quot;         nil\n   :n [tab]       #&apos;neotree-quick-look\n   :n &quot;RET&quot;       #&apos;neotree-enter\n   :n [backspace] #&apos;evil-window-prev\n   :n &quot;c&quot;         #&apos;neotree-create-node\n   :n &quot;r&quot;         #&apos;neotree-rename-node\n   :n &quot;d&quot;         #&apos;neotree-delete-node\n   :n &quot;j&quot;         #&apos;neotree-next-line\n   :n &quot;k&quot;         #&apos;neotree-previous-line\n   :n &quot;n&quot;         #&apos;neotree-next-line\n   :n &quot;p&quot;         #&apos;neotree-previous-line\n   :n &quot;h&quot;         #&apos;+neotree/collapse-or-up\n   :n &quot;l&quot;         #&apos;+neotree/expand-or-open\n   :n &quot;J&quot;         #&apos;neotree-select-next-sibling-node\n   :n &quot;K&quot;         #&apos;neotree-select-previous-sibling-node\n   :n &quot;H&quot;         #&apos;neotree-select-up-node\n   :n &quot;L&quot;         #&apos;neotree-select-down-node\n   :n &quot;G&quot;         #&apos;evil-goto-line\n   :n &quot;gg&quot;        #&apos;evil-goto-first-line\n   :n &quot;v&quot;         #&apos;neotree-enter-vertical-split\n   :n &quot;s&quot;         #&apos;neotree-enter-horizontal-split\n   :n &quot;q&quot;         #&apos;neotree-hide\n   :n &quot;R&quot;         #&apos;neotree-refresh)</p>\n<p> ;; realgud\n (:after realgud\n   :map realgud:shortkey-mode-map\n   :n &quot;j&quot; #&apos;evil-next-line\n   :n &quot;k&quot; #&apos;evil-previous-line\n   :n &quot;h&quot; #&apos;evil-backward-char\n   :n &quot;l&quot; #&apos;evil-forward-char\n   :m &quot;n&quot; #&apos;realgud:cmd-next\n   :m &quot;b&quot; #&apos;realgud:cmd-break\n   :m &quot;B&quot; #&apos;realgud:cmd-clear\n   :n &quot;c&quot; #&apos;realgud:cmd-continue)</p>\n<p> ;; rotate-text\n :n  &quot;!&quot;  #&apos;rotate-text</p>\n<p> ;; smart-forward\n :nv &quot;K&quot;  #&apos;smart-up\n :m  &quot;g]&quot; #&apos;smart-forward\n :m  &quot;g[&quot; #&apos;smart-backward</p>\n<p> ;; undo-tree -- undo/redo for visual regions\n :v &quot;C-u&quot; #&apos;undo-tree-undo\n :v &quot;C-r&quot; #&apos;undo-tree-redo</p>\n<p> ;; yasnippet\n (:after yasnippet\n   (:map yas-keymap\n     &quot;C-e&quot;           #&apos;+snippets/goto-end-of-field\n     &quot;C-a&quot;           #&apos;+snippets/goto-start-of-field\n     &quot;&quot;     #&apos;+snippets/goto-end-of-field\n     &quot;&quot;      #&apos;+snippets/goto-start-of-field\n     &quot;&quot; #&apos;+snippets/delete-to-start-of-field\n     [escape]        #&apos;evil-normal-state\n     [backspace]     #&apos;+snippets/delete-backward-char\n     [delete]        #&apos;+snippets/delete-forward-char-or-field)\n   (:map yas-minor-mode-map\n     :i &quot;&quot; yas-maybe-expand\n     :v &quot;&quot; #&apos;+snippets/expand-on-region))</p>\n<p> ;; --- Major mode bindings --------------------------\n (:after markdown-mode\n   (:map markdown-mode-map\n     ;; fix conflicts with private bindings\n     &quot;&quot; nil\n     &quot;&quot;    nil\n     &quot;&quot;   nil))</p>\n<p> ;; --- Custom evil text-objects ---------------------\n :textobj &quot;a&quot; #&apos;evil-inner-arg                    #&apos;evil-outer-arg\n :textobj &quot;B&quot; #&apos;evil-textobj-anyblock-inner-block #&apos;evil-textobj-anyblock-a-block\n :textobj &quot;i&quot; #&apos;evil-indent-plus-i-indent         #&apos;evil-indent-plus-a-indent\n :textobj &quot;I&quot; #&apos;evil-indent-plus-i-indent-up      #&apos;evil-indent-plus-a-indent-up\n :textobj &quot;J&quot; #&apos;evil-indent-plus-i-indent-up-down #&apos;evil-indent-plus-a-indent-up-down</p>\n<p> ;; --- Built-in plugins -----------------------------\n (:after comint\n   ;; TAB auto-completion in term buffers\n   :map comint-mode-map [tab] #&apos;company-complete)</p>\n<p> (:after debug\n   ;; For elisp debugging\n   :map debugger-mode-map\n   :n &quot;RET&quot; #&apos;debug-help-follow\n   :n &quot;e&quot;   #&apos;debugger-eval-expression\n   :n &quot;n&quot;   #&apos;debugger-step-through\n   :n &quot;c&quot;   #&apos;debugger-continue)</p>\n<p> (:map help-mode-map\n   :n &quot;[[&quot;  #&apos;help-go-back\n   :n &quot;]]&quot;  #&apos;help-go-forward\n   :n &quot;o&quot;   #&apos;ace-link-help\n   :n &quot;q&quot;   #&apos;quit-window\n   :n &quot;Q&quot;   #&apos;+ivy-quit-and-resume)</p>\n<p> (:after vc-annotate\n   :map vc-annotate-mode-map\n   :n &quot;q&quot;   #&apos;kill-this-buffer\n   :n &quot;d&quot;   #&apos;vc-annotate-show-diff-revision-at-line\n   :n &quot;D&quot;   #&apos;vc-annotate-show-changeset-diff-revision-at-line\n   :n &quot;SPC&quot; #&apos;vc-annotate-show-log-revision-at-line\n   :n &quot;]]&quot;  #&apos;vc-annotate-next-revision\n   :n &quot;[[&quot;  #&apos;vc-annotate-prev-revision\n   :n &quot;TAB&quot; #&apos;vc-annotate-toggle-annotation-visibility\n   :n &quot;RET&quot; #&apos;vc-annotate-find-revision-at-line))</p>\n<p>;; --- Custom key functionality ---------------------\n(defmacro do-repeat! (command next-func prev-func)\n  &quot;Repeat motions with ;/,&quot;\n  (let ((fn-sym (intern (format &quot;+evil*repeat-%s&quot; command))))\n    `(progn\n       (defun ,fn-sym (&amp;rest _)\n         (define-key evil-motion-state-map (kbd &quot;;&quot;) &apos;,next-func)\n         (define-key evil-motion-state-map (kbd &quot;,&quot;) &apos;,prev-func))\n       (advice-add #&apos;,command :before #&apos;,fn-sym))))</p>\n<p>;; n/N\n(do-repeat! evil-ex-search-next evil-ex-search-next evil-ex-search-previous)\n(do-repeat! evil-ex-search-previous evil-ex-search-next evil-ex-search-previous)\n(do-repeat! evil-ex-search-forward evil-ex-search-next evil-ex-search-previous)\n(do-repeat! evil-ex-search-backward evil-ex-search-next evil-ex-search-previous)</p>\n<p>;; f/F/t/T/s/S\n(after! evil-snipe\n  (setq evil-snipe-repeat-keys nil\n        evil-snipe-override-evil-repeat-keys nil) ; causes problems with remapped ;</p>\n<p>  (do-repeat! evil-snipe-f evil-snipe-repeat evil-snipe-repeat-reverse)\n  (do-repeat! evil-snipe-F evil-snipe-repeat evil-snipe-repeat-reverse)\n  (do-repeat! evil-snipe-t evil-snipe-repeat evil-snipe-repeat-reverse)\n  (do-repeat! evil-snipe-T evil-snipe-repeat evil-snipe-repeat-reverse)\n  (do-repeat! evil-snipe-s evil-snipe-repeat evil-snipe-repeat-reverse)\n  (do-repeat! evil-snipe-S evil-snipe-repeat evil-snipe-repeat-reverse)\n  (do-repeat! evil-snipe-x evil-snipe-repeat evil-snipe-repeat-reverse)\n  (do-repeat! evil-snipe-X evil-snipe-repeat evil-snipe-repeat-reverse))</p>\n<p>;; */#\n(after! evil-visualstar\n  (do-repeat! evil-visualstar/begin-search-forward\n    evil-ex-search-next evil-ex-search-previous)\n  (do-repeat! evil-visualstar/begin-search-backward\n    evil-ex-search-previous evil-ex-search-next))</p>\n<p>;; evil-easymotion\n(after! evil-easymotion\n  (let ((prefix (concat doom-leader-key &quot; /&quot;)))\n    ;; NOTE `evilem-default-keybinds&apos; unsets all other keys on the prefix (in\n    ;; motion state)\n    (evilem-default-keybindings prefix)\n    (evilem-define (kbd (concat prefix &quot; n&quot;)) #&apos;evil-ex-search-next)\n    (evilem-define (kbd (concat prefix &quot; N&quot;)) #&apos;evil-ex-search-previous)\n    (evilem-define (kbd (concat prefix &quot; s&quot;)) #&apos;evil-snipe-repeat\n                   :pre-hook (save-excursion (call-interactively #&apos;evil-snipe-s))\n                   :bind ((evil-snipe-scope &apos;buffer)\n                          (evil-snipe-enable-highlight)\n                          (evil-snipe-enable-incremental-highlight)))\n    (evilem-define (kbd (concat prefix &quot; S&quot;)) #&apos;evil-snipe-repeat-reverse\n                   :pre-hook (save-excursion (call-interactively #&apos;evil-snipe-s))\n                   :bind ((evil-snipe-scope &apos;buffer)\n                          (evil-snipe-enable-highlight)\n                          (evil-snipe-enable-incremental-highlight)))))</p>\n<p>;;\n;; Keybinding fixes\n;;</p>\n<p>;; This section is dedicated to &quot;fixing&quot; certain keys so that they behave\n;; properly, more like vim, or how I like it.</p>\n<p>(map! (:map input-decode-map\n        [S-iso-lefttab] [backtab]\n        (:unless window-system &quot;TAB&quot; [tab])) ; Fix TAB in terminal</p>\n<pre>  ;; I want C-a <span class=\"hljs-keyword\">and</span> C-e <span class=\"hljs-keyword\">to</span> be a little smarter. C-a will jump <span class=\"hljs-keyword\">to</span>\n  ;; indentation. Pressing it again will send you <span class=\"hljs-keyword\">to</span> the <span class=\"hljs-literal\">true</span> bol. Same goes\n  ;; <span class=\"hljs-keyword\">for</span> C-e, except it will ignore comments <span class=\"hljs-keyword\">and</span> trailing whitespace before\n  ;; jumping <span class=\"hljs-keyword\">to</span> eol.\n  :i <span class=\"hljs-string\">&quot;C-a&quot;</span> #<span class=\"hljs-symbol\">&apos;doom</span>/backward-<span class=\"hljs-keyword\">to</span>-bol-<span class=\"hljs-keyword\">or</span>-indent\n  :i <span class=\"hljs-string\">&quot;C-e&quot;</span> #<span class=\"hljs-symbol\">&apos;doom</span>/forward-<span class=\"hljs-keyword\">to</span>-last-non-comment-<span class=\"hljs-keyword\">or</span>-eol\n  :i <span class=\"hljs-string\">&quot;C-u&quot;</span> #<span class=\"hljs-symbol\">&apos;doom</span>/backward-kill-<span class=\"hljs-keyword\">to</span>-bol-<span class=\"hljs-keyword\">and</span>-indent\n\n  ;; textmate-esque newline insertion\n  :i [M-<span class=\"hljs-keyword\">return</span>]     #<span class=\"hljs-symbol\">&apos;evil</span>-<span class=\"hljs-keyword\">open</span>-below\n  :i [S-M-<span class=\"hljs-keyword\">return</span>]   #<span class=\"hljs-symbol\">&apos;evil</span>-<span class=\"hljs-keyword\">open</span>-above\n  ;; textmate-esque deletion\n  [M-backspace]     #<span class=\"hljs-symbol\">&apos;doom</span>/backward-kill-<span class=\"hljs-keyword\">to</span>-bol-<span class=\"hljs-keyword\">and</span>-indent\n  :i [backspace]    #<span class=\"hljs-symbol\">&apos;delete</span>-backward-char\n  :i [M-backspace]  #<span class=\"hljs-symbol\">&apos;doom</span>/backward-kill-<span class=\"hljs-keyword\">to</span>-bol-<span class=\"hljs-keyword\">and</span>-indent\n  ;; Emacsien motions <span class=\"hljs-keyword\">for</span> insert mode\n  :i <span class=\"hljs-string\">&quot;C-b&quot;</span> #<span class=\"hljs-symbol\">&apos;backward</span>-word\n  :i <span class=\"hljs-string\">&quot;C-f&quot;</span> #<span class=\"hljs-symbol\">&apos;forward</span>-word\n\n  ;; Highjacks space/backspace <span class=\"hljs-keyword\">to</span>:\n  ;;   a) balance spaces inside brackets/parentheses ( | ) -&gt; (|)\n  ;;   b) delete space-indented blocks intelligently\n  ;;   c) do none <span class=\"hljs-keyword\">of</span> this <span class=\"hljs-keyword\">when</span> inside a <span class=\"hljs-built_in\">string</span>\n  :i <span class=\"hljs-string\">&quot;SPC&quot;</span>                          #<span class=\"hljs-symbol\">&apos;doom</span>/inflate-space-maybe\n  :i [remap delete-backward-char]   #<span class=\"hljs-symbol\">&apos;doom</span>/deflate-space-maybe\n  :i [remap newline]                #<span class=\"hljs-symbol\">&apos;doom</span>/newline-<span class=\"hljs-keyword\">and</span>-indent\n\n  (:<span class=\"hljs-keyword\">after</span> org-mode\n    (:<span class=\"hljs-keyword\">map</span> org-mode-<span class=\"hljs-keyword\">map</span>\n      :i [remap doom/inflate-space-maybe] #<span class=\"hljs-symbol\">&apos;org</span>-self-insert-command\n      :i <span class=\"hljs-string\">&quot;C-e&quot;</span> #<span class=\"hljs-symbol\">&apos;org</span>-<span class=\"hljs-keyword\">end</span>-<span class=\"hljs-keyword\">of</span>-<span class=\"hljs-literal\">line</span>\n      :i <span class=\"hljs-string\">&quot;C-a&quot;</span> #<span class=\"hljs-symbol\">&apos;org</span>-beginning-<span class=\"hljs-keyword\">of</span>-<span class=\"hljs-literal\">line</span>))\n\n  ;; Restore common editing keys (<span class=\"hljs-keyword\">and</span> ESC) <span class=\"hljs-keyword\">in</span> minibuffer\n  (:<span class=\"hljs-keyword\">map</span> (minibuffer-local-<span class=\"hljs-keyword\">map</span>\n         minibuffer-local-ns-<span class=\"hljs-keyword\">map</span>\n         minibuffer-local-completion-<span class=\"hljs-keyword\">map</span>\n         minibuffer-local-must-match-<span class=\"hljs-keyword\">map</span>\n         minibuffer-local-isearch-<span class=\"hljs-keyword\">map</span>\n         evil-ex-completion-<span class=\"hljs-keyword\">map</span>\n         evil-ex-search-keymap\n         read-expression-<span class=\"hljs-keyword\">map</span>)\n    [escape] #<span class=\"hljs-symbol\">&apos;abort</span>-recursive-edit\n    <span class=\"hljs-string\">&quot;C-r&quot;</span> #<span class=\"hljs-symbol\">&apos;evil</span>-paste-from-<span class=\"hljs-keyword\">register</span>\n    <span class=\"hljs-string\">&quot;C-a&quot;</span> #<span class=\"hljs-symbol\">&apos;move</span>-beginning-<span class=\"hljs-keyword\">of</span>-<span class=\"hljs-literal\">line</span>\n    <span class=\"hljs-string\">&quot;C-w&quot;</span> #<span class=\"hljs-symbol\">&apos;doom</span>/minibuffer-kill-word\n    <span class=\"hljs-string\">&quot;C-u&quot;</span> #<span class=\"hljs-symbol\">&apos;doom</span>/minibuffer-kill-<span class=\"hljs-literal\">line</span>\n    <span class=\"hljs-string\">&quot;C-b&quot;</span> #<span class=\"hljs-symbol\">&apos;backward</span>-word\n    <span class=\"hljs-string\">&quot;C-f&quot;</span> #<span class=\"hljs-symbol\">&apos;forward</span>-word\n    <span class=\"hljs-string\">&quot;M-z&quot;</span> #<span class=\"hljs-symbol\">&apos;doom</span>/minibuffer-undo)\n\n  (:<span class=\"hljs-keyword\">map</span> messages-<span class=\"hljs-keyword\">buffer</span>-mode-<span class=\"hljs-keyword\">map</span>\n    <span class=\"hljs-string\">&quot;M-;&quot;</span> #<span class=\"hljs-symbol\">&apos;eval</span>-expression\n    <span class=\"hljs-string\">&quot;A-;&quot;</span> #<span class=\"hljs-symbol\">&apos;eval</span>-expression)\n\n  (:<span class=\"hljs-keyword\">map</span> tabulated-list-mode-<span class=\"hljs-keyword\">map</span>\n    [remap evil-<span class=\"hljs-keyword\">record</span>-macro] #<span class=\"hljs-symbol\">&apos;doom</span>/popup-close-maybe)\n\n  (:<span class=\"hljs-keyword\">after</span> view\n    (:<span class=\"hljs-keyword\">map</span> view-mode-<span class=\"hljs-keyword\">map</span> <span class=\"hljs-string\">&quot;&lt;escape&gt;&quot;</span> #<span class=\"hljs-symbol\">&apos;View</span>-quit-<span class=\"hljs-keyword\">all</span>)))\n    #+END_SRC\n\n    #+RESULTS:\n    : View-quit-<span class=\"hljs-keyword\">all</span></pre><p><strong><em>*</em></strong> Commands</p>\n<p>#+BEGIN_SRC emacs-lisp :tangle &quot;~/Github/doom-emacs/modules/private/allforabit/+commands.el&quot; :mkdirp yes\n;;; private/hlissner/+commands.el -<em>- lexical-binding: t; -</em>-</p>\n<p>(defalias &apos;ex! &apos;evil-ex-define-cmd)</p>\n<p>;;; Commands defined elsewhere\n;;(ex! &quot;al[ign]&quot;      #&apos;+evil:align)\n;;(ex! &quot;g[lobal]&quot;     #&apos;+evil:global)</p>\n<p>;;; Custom commands\n;; Editing\n(ex! &quot;@&quot;            #&apos;+evil:macro-on-all-lines)   ; TODO Test me\n(ex! &quot;al[ign]&quot;      #&apos;+evil:align)\n(ex! &quot;enhtml&quot;       #&apos;+web:encode-html-entities)\n(ex! &quot;dehtml&quot;       #&apos;+web:decode-html-entities)\n(ex! &quot;mc&quot;           #&apos;+evil:mc)\n(ex! &quot;iedit&quot;        #&apos;evil-multiedit-ex-match)\n(ex! &quot;na[rrow]&quot;     #&apos;+evil:narrow-buffer)\n(ex! &quot;retab&quot;        #&apos;+evil:retab)</p>\n<p>;; External resources\n;; TODO (ex! &quot;db&quot;          #&apos;doom:db)\n;; TODO (ex! &quot;dbu[se]&quot;     #&apos;doom:db-select)\n;; TODO (ex! &quot;go[ogle]&quot;    #&apos;doom:google-search)\n(ex! &quot;lo[okup]&quot;    #&apos;+jump:online)\n(ex! &quot;http&quot;        #&apos;httpd-start)            ; start http server\n(ex! &quot;repl&quot;        #&apos;+eval:repl)             ; invoke or send to repl\n;; TODO (ex! &quot;rx&quot;          &apos;doom:regex)             ; open re-builder\n(ex! &quot;sh[ell]&quot;     #&apos;+eshell:run)\n(ex! &quot;t[mux]&quot;      #&apos;+tmux:run)              ; send to tmux\n(ex! &quot;tcd&quot;         #&apos;+tmux:cd-here)          ; cd to default-directory in tmux\n(ex! &quot;x&quot;           #&apos;doom/open-project-scratch-buffer)</p>\n<p>;; GIT\n(ex! &quot;gist&quot;        #&apos;+gist:send)  ; send current buffer/region to gist\n(ex! &quot;gistl&quot;       #&apos;+gist:list)  ; list gists by user\n(ex! &quot;gbrowse&quot;     #&apos;+vcs/git-browse)        ; show file in github/gitlab\n(ex! &quot;gissues&quot;     #&apos;+vcs/git-browse-issues) ; show github issues\n(ex! &quot;git&quot;         #&apos;magit-status)           ; open magit status window\n(ex! &quot;gstage&quot;      #&apos;magit-stage)\n(ex! &quot;gunstage&quot;    #&apos;magit-unstage)\n(ex! &quot;gblame&quot;      #&apos;magit-blame)\n(ex! &quot;grevert&quot;     #&apos;git-gutter:revert-hunk)</p>\n<p>;; Dealing with buffers\n(ex! &quot;clean[up]&quot;   #&apos;doom/cleanup-buffers)\n(ex! &quot;k[ill]&quot;      #&apos;doom/kill-this-buffer)\n(ex! &quot;k[ill]all&quot;   #&apos;+hlissner:kill-all-buffers)\n(ex! &quot;k[ill]m&quot;     #&apos;+hlissner:kill-matching-buffers)\n(ex! &quot;k[ill]o&quot;     #&apos;doom/kill-other-buffers)\n(ex! &quot;l[ast]&quot;      #&apos;doom/popup-restore)\n(ex! &quot;m[sg]&quot;       #&apos;view-echo-area-messages)\n(ex! &quot;pop[up]&quot;     #&apos;doom/popup-this-buffer)</p>\n<p>;; Project navigation\n(ex! &quot;a&quot;           #&apos;projectile-find-other-file)\n(ex! &quot;cd&quot;          #&apos;+hlissner:cd)\n(cond ((featurep! :completion ivy)\n       (ex! &quot;ag&quot;       #&apos;+ivy:ag)\n       (ex! &quot;agc[wd]&quot;  #&apos;+ivy:ag-cwd)\n       (ex! &quot;rg&quot;       #&apos;+ivy:rg)\n       (ex! &quot;rgc[wd]&quot;  #&apos;+ivy:rg-cwd)\n       (ex! &quot;sw[iper]&quot; #&apos;+ivy:swiper)\n       (ex! &quot;todo&quot;     #&apos;+ivy:todo))\n      ((featurep! :completion helm)\n       (ex! &quot;ag&quot;       #&apos;+helm:ag)\n       (ex! &quot;agc[wd]&quot;  #&apos;+helm:ag-cwd)\n       (ex! &quot;rg&quot;       #&apos;+helm:rg)\n       (ex! &quot;rgc[wd]&quot;  #&apos;+helm:rg-cwd)\n       (ex! &quot;sw[oop]&quot;  #&apos;+helm:swoop)\n       (ex! &quot;todo&quot;     #&apos;+helm:todo)))</p>\n<p>;; Project tools\n(ex! &quot;build&quot;       #&apos;+eval/build)\n(ex! &quot;debug&quot;       #&apos;+debug/run)\n(ex! &quot;er[rors]&quot;    #&apos;flycheck-list-errors)</p>\n<p>;; File operations\n(ex! &quot;cp&quot;          #&apos;+evil:copy-this-file)\n(ex! &quot;mv&quot;          #&apos;+evil:move-this-file)\n(ex! &quot;rm&quot;          #&apos;+evil:delete-this-file)</p>\n<p>;; Sessions/tabs\n(ex! &quot;sclear&quot;      #&apos;+workspace/kill-session)\n(ex! &quot;sl[oad]&quot;     #&apos;+workspace:load-session)\n(ex! &quot;ss[ave]&quot;     #&apos;+workspace:save-session)\n(ex! &quot;tabc[lose]&quot;  #&apos;+workspace:delete)\n(ex! &quot;tabclear&quot;    #&apos;doom/kill-all-buffers)\n(ex! &quot;tabl[ast]&quot;   #&apos;+workspace/switch-to-last)\n(ex! &quot;tabload&quot;     #&apos;+workspace:load)\n(ex! &quot;tabn[ew]&quot;    #&apos;+workspace:new)\n(ex! &quot;tabn[ext]&quot;   #&apos;+workspace:switch-next)\n(ex! &quot;tabp[rev]&quot;   #&apos;+workspace:switch-previous)\n(ex! &quot;tabr[ename]&quot; #&apos;+workspace:rename)\n(ex! &quot;tabs&quot;        #&apos;+workspace/display)\n(ex! &quot;tabsave&quot;     #&apos;+workspace:save)</p>\n<p>;; Org-mode\n(ex! &quot;cap&quot;         #&apos;+org-capture/dwim)</p>\n<p>#+END_SRC\n<strong><em>*</em></strong> Autoload</p>\n<p>#+BEGIN_SRC emacs-lisp :tangle &quot;~/Github/doom-emacs/modules/private/allforabit/autoloads.el&quot; :mkdirp yes\n(message &quot;hello&quot;)</p>\n<p>#+END_SRC</p>\n<h1>&quot;~/Github/doom-emacs/modules/private/allforabit/autoload/evil.el&quot;</h1>\n<p>#+BEGIN_SRC emacs-lisp :tangle nil :mkdirp yes</p>\n<p>;; ;;; private/allforabit/autoload/evil.el -<em>- lexical-binding: t; -</em>-</p>\n<p>;; ;;;###autoload (autoload &apos;+allforabit:multi-next-line &quot;private/allforabit/autoload/evil&quot; nil t)\n;; (evil-define-motion +allforabit:multi-next-line (count)\n;;   &quot;Move down 6 lines.&quot;\n;;   :type line\n;;   (let ((line-move-visual (or visual-line-mode (derived-mode-p &apos;text-mode))))\n;;     (evil-line-move (* 6 (or count 1)))))</p>\n<p>;; ;;;###autoload (autoload &apos;+allforabit:multi-previous-line &quot;private/allforabit/autoload/evil&quot; nil t)\n;; (evil-define-motion +allforabit:multi-previous-line (count)\n;;   &quot;Move up 6 lines.&quot;\n;;   :type line\n;;   (let ((line-move-visual (or visual-line-mode (derived-mode-p &apos;text-mode))))\n;;     (evil-line-move (- (* 6 (or count 1))))))</p>\n<p>;; ;;;###autoload (autoload &apos;+allforabit:cd &quot;private/allforabit/autoload/evil&quot; nil t)\n;; (evil-define-command +allforabit:cd ()\n;;   &quot;Change <code>default-directory&apos; with</code>cd&apos;.&quot;\n;;   (interactive &quot;&quot;)\n;;   (cd input))</p>\n<p>;; ;;;###autoload (autoload &apos;+allforabit:kill-all-buffers &quot;private/allforabit/autoload/evil&quot; nil t)\n;; (evil-define-command +allforabit:kill-all-buffers (&amp;optional bang)\n;;   &quot;Kill all buffers. If BANG, kill current session too.&quot;\n;;   (interactive &quot;&lt;!&gt;&quot;)\n;;   (if bang\n;;       (+workspace/kill-session)\n;;     (doom/kill-all-buffers)))</p>\n<p>;; ;;;###autoload (autoload &apos;+allforabit:kill-matching-buffers &quot;private/allforabit/autoload/evil&quot; nil t)\n;; (evil-define-command +allforabit:kill-matching-buffers (&amp;optional bang pattern)\n;;   &quot;Kill all buffers matching PATTERN regexp. If BANG, only match project\n;; buffers.&quot;\n;;   (interactive &quot;<a>&quot;)\n;;   (doom/kill-matching-buffers pattern bang))</a></p>\n<p>#+END_SRC</p>\n<h1>&quot;~/Github/doom-emacs/modules/private/allforabit/autoload/allforabit.el&quot;</h1>\n<p>#+BEGIN_SRC emacs-lisp :tangle yes :mkdirp yes</p>\n<p>;;; private/allforabit/autoload/allforabit.el -<em>- lexical-binding: t; -</em>-</p>\n<p>;;;###autoload\n(defun +allforabit/install-snippets ()\n  &quot;Install my snippets from <a href=\"https://github.com/allforabit/emacs-snippets\">https://github.com/allforabit/emacs-snippets</a> into\nprivate/allforabit/snippets.&quot;\n  (interactive)\n  (doom-fetch :github &quot;allforabit/emacs-snippets&quot;\n              (expand-file-name &quot;snippets&quot; (doom-module-path :private &apos;allforabit))))</p>\n<p>;;;###autoload\n(defun +allforabit/yank-buffer-filename ()\n  &quot;Copy the current buffer&apos;s path to the kill ring.&quot;\n  (interactive)\n  (if-let (filename (or buffer-file-name (bound-and-true-p list-buffers-directory)))\n      (message (kill-new (abbreviate-file-name filename)))\n    (error &quot;Couldn&apos;t find filename in current buffer&quot;)))</p>\n<p>(defmacro +allforabit-def-finder! (name dir)\n  &quot;Define a pair of find-file and browse functions.&quot;\n  `(progn\n     (defun ,(intern (format &quot;+allforabit/find-in-%s&quot; name)) ()\n       (interactive)\n       (let ((default-directory ,dir)\n             projectile-require-project-root\n             projectile-cached-buffer-file-name\n             projectile-cached-project-root)\n         (call-interactively (command-remapping #&apos;projectile-find-file))))\n     (defun ,(intern (format &quot;+allforabit/browse-%s&quot; name)) ()\n       (interactive)\n       (let ((default-directory ,dir))\n         (call-interactively (command-remapping #&apos;find-file))))))</p>\n<p>;;;###autoload (autoload &apos;+allforabit/find-in-templates &quot;private/allforabit/autoload/allforabit&quot; nil t)\n;;;###autoload (autoload &apos;+allforabit/browse-templates &quot;private/allforabit/autoload/allforabit&quot; nil t)\n(+allforabit-def-finder! templates +file-templates-dir)</p>\n<p>;;;###autoload (autoload &apos;+allforabit/find-in-snippets &quot;private/allforabit/autoload/allforabit&quot; nil t)\n;;;###autoload (autoload &apos;+allforabit/browse-snippets &quot;private/allforabit/autoload/allforabit&quot; nil t)\n(+allforabit-def-finder! snippets +allforabit-snippets-dir)</p>\n<p>;;;###autoload (autoload &apos;+allforabit/find-in-dotfiles &quot;private/allforabit/autoload/allforabit&quot; nil t)\n;;;###autoload (autoload &apos;+allforabit/browse-dotfiles &quot;private/allforabit/autoload/allforabit&quot; nil t)\n(+allforabit-def-finder! dotfiles (expand-file-name &quot;.dotfiles&quot; &quot;~&quot;))</p>\n<p>;;;###autoload (autoload &apos;+allforabit/find-in-emacsd &quot;private/allforabit/autoload/allforabit&quot; nil t)\n;;;###autoload (autoload &apos;+allforabit/browse-emacsd &quot;private/allforabit/autoload/allforabit&quot; nil t)\n(+allforabit-def-finder! emacsd doom-emacs-dir)</p>\n<p>;;;###autoload (autoload &apos;+allforabit/find-in-notes &quot;private/allforabit/autoload/allforabit&quot; nil t)\n;;;###autoload (autoload &apos;+allforabit/browse-notes &quot;private/allforabit/autoload/allforabit&quot; nil t)\n(+allforabit-def-finder! notes +org-dir)</p>\n<p>#+END_SRC\n<strong><em>*</em></strong> A thing</p>\n<p>#+BEGIN_SRC emacs-lisp :tangle &quot;~/Github/doom-emacs/modules/private/allforabit/a-thing.el&quot; :mkdirp yes\n(map!\n ;; --- Global keybindings ---------------------------\n :nvime &quot;M-h&quot; (&#x3BB;! (message &quot;hello&quot;)))</p>\n<p>#+END_SRC\n<strong><em>*</em></strong> Git ignore</p>\n<p>#+BEGIN_SRC txt :tangle &quot;~/Github/doom-emacs/modules/private/allforabit/.gitignore&quot; :mkdirp yes\nsnippets\n.authinfo.gpg</p>\n<p>#+END_SRC</p>\n<ul>\n<li>Installation\nProvide some sort of installation steps. Use org tangle, git, git sub modules.\n** Make symlinks\nThis the script from original dotfiles:</li>\n</ul>\n<p>#+BEGIN_SRC sh :tangle</p>\n<p>#!/bin/bash</p>\n<p>############################</p>\n<h1>.make.sh</h1>\n<h1>This script creates symlinks from the home directory to any desired dotfiles in ~/dotfiles</h1>\n<p>############################</p>\n<p>########## Variables</p>\n<p>dir=~/dotfiles                    # dotfiles directory\nolddir=~/dotfiles_old             # old dotfiles backup directory\nfiles=&quot;zshrc vimrc vim spacemacs emacs.d&quot;          # list of files/folders to symlink in homedir</p>\n<p>##########</p>\n<h1>create dotfiles_old in homedir</h1>\n<p>echo -n &quot;Creating $olddir for backup of any existing dotfiles in ~ ...&quot;\nmkdir -p $olddir\necho &quot;done&quot;</p>\n<h1>change to the dotfiles directory</h1>\n<p>echo -n &quot;Changing to the $dir directory ...&quot;\ncd $dir\necho &quot;done&quot;</p>\n<h1>move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks from the homedir to any files in the ~/dotfiles directory specified in $files</h1>\n<p>for file in $files; do\n  echo &quot;Moving any existing dotfiles from ~ to $olddir&quot;\n  mv ~/.$file ~/dotfiles_old/\n  echo &quot;Creating symlink to $file in home directory.&quot;\n  ln -s $dir/$file ~/.$file\ndone</p>\n<p>git clone <a href=\"https://github.com/gmarik/vundle.git\">https://github.com/gmarik/vundle.git</a> ~/dotfiles/vim/bundle/vundle\nvim +PluginInstall +qall</p>\n<p>#+END_SRC\n** A test sh file</p>\n<p>#+BEGIN_SRC sh\ncd ~/dotfiles/\nls -la</p>\n<p>#+END_SRC</p>\n<p>#+RESULTS:\n| total       | 136 |       |       |       |     |    |       |                                  |    |                                |\n| drwxr-xr-x  |  19 | kevin | staff |   646 | Oct |  1 | 14:24 | 0                                |    |                                |\n| lrwxr-xr-x  |   1 | kevin | staff |    30 | Oct |  1 | 14:24 | .#README.org                     | -&gt; | kevin@MacBook-Air-4.local.2271 |\n| drwxr-xr-x@ | 260 | kevin | staff |  8840 | Oct |  1 | 13:52 | ..                               |    |                                |\n| -rw-r--r--@ |   1 | kevin | staff | 12292 | Aug |  4 | 10:51 | .DS_Store                        |    |                                |\n| drwxr-xr-x  |  17 | kevin | staff |   578 | Oct |  1 | 14:24 | .git                             |    |                                |\n| -rw-r--r--  |   1 | kevin | staff |    71 | Sep | 16 | 14:01 | .gitignore                       |    |                                |\n| -rw-r--r--  |   1 | kevin | staff |   158 | Mar |  8 |  2017 | .gitmodules                      |    |                                |\n| -rw-r--r--  |   1 | kevin | staff |  3233 | Oct |  1 | 14:24 | README.org                       |    |                                |\n| drwxr-xr-x  |   5 | kevin | staff |   170 | Jul | 15 | 18:32 | autoit                           |    |                                |\n| -rw-r--r--  |   1 | kevin | staff |  2968 | Mar |  8 |  2017 | bashrc                           |    |                                |\n| drwxr-xr-x  |   4 | kevin | staff |   136 | Jun | 29 |  2014 | gt8_patches                      |    |                                |\n| -rw-r--r--@ |   1 | kevin | staff |   341 | Feb | 26 |  2017 | instruments.xml                  |    |                                |\n| -rw-r--r--  |   1 | kevin | staff |   587 | Jul | 15 | 18:32 | jsbeautifyrc                     |    |                                |\n| -rwxr-xr-x  |   1 | kevin | staff |  1129 | Mar |  8 |  2017 | makesymlinks.sh                  |    |                                |\n| -rw-r--r--  |   1 | kevin | staff |  1821 | Jun | 10 |  2016 | midi_program_change_to_note.mipi |    |                                |\n| drwxr-xr-x  |   9 | kevin | staff |   306 | Sep | 16 | 14:39 | spacemacs.d                      |    |                                |\n| drwxr-xr-x  |   9 | kevin | staff |   306 | Mar |  8 |  2017 | vim                              |    |                                |\n| -rw-r--r--  |   1 | kevin | staff | 10793 | Jun | 10 |  2016 | vimrc                            |    |                                |\n| -rw-r--r--  |   1 | kevin | staff |  1024 | Sep | 23 | 15:37 | zshrc                            |    |                                |</p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/allforabit/dotfiles",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/allforabit",
          "text": "allforabit"
        }
      ]
    }
  ]
}