# -*- firestarter: org-babel-tangle -*- 
#+TITLE: Screenshots
* Ideas
** Use create image
(create-image "foo.xpm" 'xpm nil :heuristic-mask t)
** Use ideas from pdf-view

[[https://github.com/politza/pdf-tools/blob/master/lisp/pdf-view.el][PDF View]]
Example: 
#+BEGIN_SRC emacs-lisp
(defun pdf-view-display-image (image &optional window inhibit-slice-p)
  ;; TODO: write documentation!
  (let ((ol (pdf-view-current-overlay window)))
    (when (window-live-p (overlay-get ol 'window))
      (let* ((size (image-size image t))
             (slice (if (not inhibit-slice-p)
                        (pdf-view-current-slice window)))
             (displayed-width (floor
                               (if slice
                                   (* (nth 2 slice)
                                      (car (image-size image)))
                                 (car (image-size image))))))
        (setf (pdf-view-current-image window) image)
        (move-overlay ol (point-min) (point-max))
        ;; In case the window is wider than the image, center the image
        ;; horizontally.
        (overlay-put ol 'before-string
                     (when (> (window-width window)
                              displayed-width)
                       (propertize " " 'display
                                   `(space :align-to
                                           ,(/ (- (window-width window)
                                                  displayed-width) 2)))))
        (overlay-put ol 'display
                     (if slice
                         (list (cons 'slice
                                     (pdf-util-scale slice size 'round))
                               image)
                       image))
        (let* ((win (overlay-get ol 'window))
               (hscroll (image-mode-window-get 'hscroll win))
               (vscroll (image-mode-window-get 'vscroll win)))
          ;; Reset scroll settings, in case they were changed.
          (if hscroll (set-window-hscroll win hscroll))
          (if vscroll (set-window-vscroll win vscroll)))))))


  #+END_SRC
** Use chrome devtools screenshot facility
- [[https://github.com/tryggvigy/chrome-devtools-protocol-screenshot][Chrome devtools screenshot link]]
- No need to use full library, just use CDP:
#+NAME: chrome-take-screenshot
#+BEGIN_SRC js
console.log('hi');
const CDP = require('chrome-remote-interface');
const fs = require('fs');
const path = require('path');
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

const port = 9222;

const dir = './tmp/screenshot_captures/';

CDP({port: port}, async (client) => {
  const {Page, Emulation, Runtime} = client;
  const b64Img = await Page.captureScreenshot();
  const buffer = new Buffer(b64Img.data, 'base64');

  fs.writeFileSync(dir + '/out.png', buffer);
  client.close();
});


#+END_SRC

#+RESULTS: chrome-take-screenshot
: hi
: undefined

#+BEGIN_SRC js
// TODO this is broken through noweb for some reason
// if (!fs.existsSync(dir)) {
//   fs.mkdirSync(dir)
// }
#+END_SRC

#+NAME: chrome-take-screeenshot-cmd
#+BEGIN_SRC emacs-lisp :noweb yes
(defun a4b-ss-chrome()
  (interactive)
  ;; TODO make this dynamic
  (let ((default-directory "~/Documents/Github/dotfiles"))
    (shell-command-to-string "node -e \"
<<chrome-take-screenshot>>
\""))
  )
#+END_SRC

#+RESULTS: chrome-take-screeenshot-cmd
: a4b-ss-chrome

#+BEGIN_SRC emacs-lisp
(shell-command-to-string "node -e \"
console.log('hi')
console.log('hello')
\"")
#+END_SRC

#+RESULTS:
: hi
: hello


** Make it a major mode (like pdf-view)
** Use syphon (OSX) and SPOUT (Windows) to capture GPU screenshots
- [[https://www.vmix.com/software/download.aspx][Screenshot tool from vmix]]
** Wasamasa flipbook
- [[https://github.com/wasamasa/quasiconf-2014/blob/master/code/flipbook.el][Flipbook by Wasamasa]]
- [[https://www.youtube.com/watch?v=x1t9b7Fqo9c][Video wasamasa graphics emacs]]
- https://github.com/wasamasa/quasiconf-2015
- https://www.youtube.com/watch?v=NBArWrn6FnY&feature=youtu.be 

  Hello world this is a very long line that will continue for a good deal of time but at some point will wrap!!!

  And a thing that I want to with the other thing is 
